==================
Simple bitwise AND
==================

contract C {
  function f() {
    uint a = 0x0F & 0x0A;
  }
}

---

(source_file
  (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (uint_type)
            name: (identifier))
          value: (bitwise_and_expression
            left: (primary_expression
              (literal
                (hex_literal)))
            right: (primary_expression
              (literal
                (hex_literal)))))))))

==================
Bitwise operator precedence
==================
// Should parse as: (a & b) ^ (c | d)
// This is incorrect based on C-like precedence.
// Correct is: a | (b ^ (c & d)). Precedence is &, ^, |
contract C {
  function f() {
    uint a = 0x1 | 0x2 ^ 0x4 & 0x8;
  }
}

---

(source_file
  (comment)
  (comment)
  (comment)
  (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (uint_type)
            name: (identifier))
          value: (bitwise_or_expression
            left: (primary_expression
              (literal
                (hex_literal)))
            right: (bitwise_xor_expression
              left: (primary_expression
                (literal
                  (hex_literal)))
              right: (bitwise_and_expression
                left: (primary_expression
                  (literal
                    (hex_literal)))
                right: (primary_expression
                  (literal
                    (hex_literal)))))))))))

==================
Left-associativity of bitwise operators
==================

contract C {
  function f() {
    uint a = 0x1 & 0x2 & 0x3;
  }
}

---

(source_file
  (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (uint_type)
            name: (identifier))
          value: (bitwise_and_expression
            left: (bitwise_and_expression
              left: (primary_expression
                (literal
                  (hex_literal)))
              right: (primary_expression
                (literal
                  (hex_literal))))
            right: (primary_expression
              (literal
                (hex_literal)))))))))

==================
Interaction with shift operators
==================
// Shift has higher precedence than bitwise operators
contract C {
  function f() {
    uint a = 1 << 2 & 3;
  }
}

---

(source_file
  (comment)
  (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (uint_type)
            name: (identifier))
          value: (bitwise_and_expression
            left: (shift_expression
              left: (primary_expression
                (literal
                  (number_literal)))
              operator: (shift_operator)
              right: (primary_expression
                (literal
                  (number_literal))))
            right: (primary_expression
              (literal
                (number_literal)))))))))
