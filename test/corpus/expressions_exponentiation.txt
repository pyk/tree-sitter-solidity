==================
Simple exponentiation
==================

contract C {
  function f() {
    uint a = 2 ** 3;
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (uint_type)
            name: (identifier))
          value: (exp_expression
            left: (literal
              (number))
            operator: (exp_op)
            right: (literal
              (number))))))))

==================
Right-associativity of exponentiation
==================

contract C {
  function f() {
    uint a = 2 ** 3 ** 2;
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (uint_type)
            name: (identifier))
          value: (exp_expression
            left: (literal
              (number))
            operator: (exp_op)
            right: (exp_expression
              left: (literal
                (number))
              operator: (exp_op)
              right: (literal
                (number)))))))))

==================
Precedence over multiplication
==================

contract C {
  function f() {
    uint a = 4 * 2 ** 3;
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (uint_type)
            name: (identifier))
          value: (mul_expression
            left: (literal
              (number))
            operator: (mul_op)
            right: (exp_expression
              left: (literal
                (number))
              operator: (exp_op)
              right: (literal
                (number)))))))))

==================
Precedence over addition
==================

contract C {
  function f() {
    uint a = 1 + 2 ** 3;
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (uint_type)
            name: (identifier))
          value: (add_expression
            left: (literal
              (number))
            operator: (add_op)
            right: (exp_expression
              left: (literal
                (number))
              operator: (exp_op)
              right: (literal
                (number)))))))))

==================
Interaction with unary minus
==================

contract C {
  function f() {
    int a = -2 ** 4;
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (int_type)
            name: (identifier))
          value: (exp_expression
            left: (unary_expression
              argument: (literal
                (number)))
            operator: (exp_op)
            right: (literal
              (number))))))))

==================
Parentheses overriding precedence
==================

contract C {
  function f() {
    uint a = (2 + 3) ** 4;
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (uint_type)
            name: (identifier))
          value: (exp_expression
            left: (tuple_expression
              (add_expression
                left: (literal
                  (number))
                operator: (add_op)
                right: (literal
                  (number))))
            operator: (exp_op)
            right: (literal
              (number))))))))

==================
Top-level constant with exponentiation
==================

uint256 constant MY_EXP = 2 ** 8;

---

(source_file
  definition: (constant
    type: (uint_type)
    name: (identifier)
    value: (exp_expression
      left: (literal
        (number))
      operator: (exp_op)
      right: (literal
        (number)))))
