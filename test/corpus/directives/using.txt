==================
Using directive for a specific type
==================

using SafeMath for uint256;

---

(source_file
  directive: (using
    declaration: (identifier)
    target: (uint_type)))

==================
Using directive for all types (wildcard)
==================

using SafeMath for *;

---

(source_file
  directive: (using
    declaration: (identifier)
    target: (wildcard_type)))

==================
Using directive with destructuring
==================

using {add, sub} for uint256;

---

(source_file
  directive: (using
    declaration: (using_declaration
      name: (identifier))
    declaration: (using_declaration
      name: (identifier))
    target: (uint_type)))

==================
Using directive with operator aliasing
==================

using {add as +, sub as -} for uint256;

---

(source_file
  directive: (using
    declaration: (using_declaration
      name: (identifier)
      operator: (user_definable_operator))
    declaration: (using_declaration
      name: (identifier)
      operator: (user_definable_operator))
    target: (uint_type)))

==================
Using directive with global keyword
==================

using SafeMath for uint256 global;

---

(source_file
  directive: (using
    declaration: (identifier)
    target: (uint_type)
    global: (global_using)))

==================
Complex using directive
==================

using {MyLib.add, MyLib.sub as -} for MyStruct global;

---

(source_file
  directive: (using
    declaration: (using_declaration
      name: (qualified_function_name
        scope: (identifier)
        name: (identifier)))
    declaration: (using_declaration
      name: (qualified_function_name
        scope: (identifier)
        name: (identifier))
      operator: (user_definable_operator))
    target: (user_defined_type
      (identifier))
    global: (global_using)))
