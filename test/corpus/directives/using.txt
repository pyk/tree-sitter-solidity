==================
Using directive for a specific type
==================

using SafeMath for uint256;

---

(source_file
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (uint_type))))

==================
Using directive for all types (wildcard)
==================

using SafeMath for *;

---

(source_file
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (wildcard))))

==================
Using directive with destructuring
==================

using {add, sub} for uint256;

---

(source_file
  directive: (using
    (using_function
      declaration: (using_declaration
        name: (symbol
          name: (identifier)))
      declaration: (using_declaration
        name: (symbol
          name: (identifier)))
      target: (uint_type))))

==================
Using directive with operator aliasing
==================

using {add as +, sub as -} for uint256;

---

(source_file
  directive: (using
    (using_function
      declaration: (using_declaration
        name: (symbol
          name: (identifier))
        operator: (using_op))
      declaration: (using_declaration
        name: (symbol
          name: (identifier))
        operator: (using_op))
      target: (uint_type))))

==================
Using directive with global keyword
==================

using SafeMath for uint256 global;

---

(source_file
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (uint_type)
      global: (global))))

==================
Complex using directive
==================

using {MyLib.add, MyLib.sub as -} for MyStruct global;

---

(source_file
  directive: (using
    (using_function
      declaration: (using_declaration
        name: (symbol
          scope: (symbol
            name: (identifier))
          name: (identifier)))
      declaration: (using_declaration
        name: (symbol
          scope: (symbol
            name: (identifier))
          name: (identifier))
        operator: (using_op))
      target: (custom_type
        symbol: (symbol
          name: (identifier)))
      global: (global))))
