==================
Using directive for a specific type
==================

using SafeMath for uint256;

---

(source_file
  directive: (using
    library: (symbol
      name: (identifier))
    target: (uint_type)))

==================
Using directive for all types (wildcard)
==================

using SafeMath for *;

---

(source_file
  directive: (using
    library: (symbol
      name: (identifier))
    target: (wildcard)))

==================
Using directive with destructuring
==================

using {add, sub} for uint256;

---

(source_file
  directive: (using
    function: (using_function
      name: (symbol
        name: (identifier)))
    function: (using_function
      name: (symbol
        name: (identifier)))
    target: (uint_type)))

==================
Using directive with operator aliasing
==================

using {add as +, sub as -} for uint256;

---

(source_file
  directive: (using
    function: (using_function
      name: (symbol
        name: (identifier))
      operator: (using_op))
    function: (using_function
      name: (symbol
        name: (identifier))
      operator: (using_op))
    target: (uint_type)))

==================
Using directive with global keyword
==================

using SafeMath for uint256 global;

---

(source_file
  directive: (using
    library: (symbol
      name: (identifier))
    target: (uint_type)
    global: (global)))

==================
Complex using directive
==================

using {MyLib.add, MyLib.sub as -} for MyStruct global;

---

(source_file
  directive: (using
    function: (using_function
      name: (symbol
        scope: (symbol
          name: (identifier))
        name: (identifier)))
    function: (using_function
      name: (symbol
        scope: (symbol
          name: (identifier))
        name: (identifier))
      operator: (using_op))
    target: (custom_type
      symbol: (symbol
        name: (identifier)))
    global: (global)))
