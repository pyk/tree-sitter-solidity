==================
Simple bitwise XOR with hex literals
==================

uint constant x = 0xC ^ 0xA;

---

(source_file
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitwise
      (bitxor
        left: (literal
          (hex))
        operator: (bitxor_op)
        right: (literal
          (hex))))))

==================
Bitwise XOR with variables
==================

contract C {
    function f(uint a, uint b) public pure returns (uint) {
        return a ^ b;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (uint_type)))
      body: (block
        statement: (return
          value: (bitwise
            (bitxor
              left: (symbol
                name: (identifier))
              operator: (bitxor_op)
              right: (symbol
                name: (identifier)))))))))

==================
Chained bitwise XOR expressions (left-associative)
==================

// Should parse as (a ^ b) ^ c
uint constant x = a ^ b ^ c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitwise
      (bitxor
        left: (bitwise
          (bitxor
            left: (symbol
              name: (identifier))
            operator: (bitxor_op)
            right: (symbol
              name: (identifier))))
        operator: (bitxor_op)
        right: (symbol
          name: (identifier))))))

==================
Bitwise XOR precedence with bitwise AND (critical test)
==================

// Should parse as a ^ (b & c) because AND is higher precedence
uint constant x = a ^ b & c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitwise
      (bitxor
        left: (symbol
          name: (identifier))
        operator: (bitxor_op)
        right: (bitwise
          (bitand
            left: (symbol
              name: (identifier))
            operator: (bitand_op)
            right: (symbol
              name: (identifier))))))))

==================
Bitwise XOR precedence with bitwise OR (critical test)
==================

// Should parse as (a ^ b) | c because OR is lower precedence
uint constant x = a ^ b | c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitwise
      (bitor
        left: (bitwise
          (bitxor
            left: (symbol
              name: (identifier))
            operator: (bitxor_op)
            right: (symbol
              name: (identifier))))
        operator: (bitor_op)
        right: (symbol
          name: (identifier))))))

==================
Bitwise XOR precedence with comparison operators
==================

// Should parse as (a ^ b) > c
bool constant x = a ^ b > c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (bool_type)
    name: (symbol
      name: (identifier))
    value: (comparison
      left: (bitwise
        (bitxor
          left: (symbol
            name: (identifier))
          operator: (bitxor_op)
          right: (symbol
            name: (identifier))))
      operator: (gt)
      right: (symbol
        name: (identifier)))))

==================
Bitwise XOR with parenthesized expression
==================

// Should parse as a ^ (b + c)
uint constant x = a ^ (b + c);

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitwise
      (bitxor
        left: (symbol
          name: (identifier))
        operator: (bitxor_op)
        right: (group
          expression: (add
            left: (symbol
              name: (identifier))
            operator: (add_op)
            right: (symbol
              name: (identifier))))))))

==================
Bitwise XOR in an assignment expression
==================

contract C {
    function f(uint a, uint b) public {
        a ^= b;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        statement: (assignment
          left: (symbol
            name: (identifier))
          operator: (xor_assign_op)
          right: (symbol
            name: (identifier)))))))
