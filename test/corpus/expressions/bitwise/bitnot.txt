==================
Simple bitwise NOT on a number literal
==================

uint constant x = ~123;

---

(source_file
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitnot
      operator: (bitnot_op)
      argument: (literal
        (number)))))

==================
Bitwise NOT on a hex literal
==================

bytes32 constant x = ~0x111122223333444455556666777788889999AAAABBBBCCCCDDDDEEEEFFFF;

---

(source_file
  definition: (constant_variable
    type: (bytes_type)
    name: (symbol
      name: (identifier))
    value: (bitnot
      operator: (bitnot_op)
      argument: (literal
        (hex)))))

==================
Bitwise NOT on a variable
==================

contract C {
    function f(uint a) public pure returns (uint) {
        return ~a;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (uint_type)))
      body: (block
        statement: (return
          value: (bitnot
            operator: (bitnot_op)
            argument: (symbol
              name: (identifier))))))))

==================
Bitwise NOT precedence with exponentiation
==================

// Unary bitwise NOT has higher precedence than exponentiation.
// This should parse as (~a) ** b.
uint constant x = ~a ** b;

---

(source_file
  (comment)
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (exp
      left: (bitnot
        operator: (bitnot_op)
        argument: (symbol
          name: (identifier)))
      operator: (exp_op)
      right: (symbol
        name: (identifier)))))

==================
Parentheses to force bitwise NOT first
==================

// Should parse as (~a) ** b
uint constant x = (~a) ** b;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (exp
      left: (group
        expression: (bitnot
          operator: (bitnot_op)
          argument: (symbol
            name: (identifier))))
      operator: (exp_op)
      right: (symbol
        name: (identifier)))))

==================
Bitwise NOT precedence with bitwise AND
==================

// Should parse as (~a) & b
uint constant x = ~a & b;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitand
      left: (bitnot
        operator: (bitnot_op)
        argument: (symbol
          name: (identifier)))
      operator: (bitand_op)
      right: (symbol
        name: (identifier)))))

==================
Bitwise NOT on a parenthesized expression
==================

// Should apply NOT to the result of (a | b)
uint constant x = ~(a | b);

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitnot
      operator: (bitnot_op)
      argument: (group
        expression: (bitor
          left: (symbol
            name: (identifier))
          operator: (bitor_op)
          right: (symbol
            name: (identifier)))))))

==================
Double bitwise NOT
==================

uint constant x = ~~a;

---

(source_file
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitnot
      operator: (bitnot_op)
      argument: (bitnot
        operator: (bitnot_op)
        argument: (symbol
          name: (identifier))))))

==================
Bitwise NOT on a cast expression
==================

// A very common pattern: ~uint(0) to get all bits set
uint constant ALL_BITS = ~uint256(0);

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (bitnot
      operator: (bitnot_op)
      argument: (cast
        type: (uint_type)
        argument: (literal
          (number))))))

==================
Bitwise NOT in a function argument
==================

contract C {
    function log(uint val) public pure {}
    function f(uint a) public pure {
        log(~a);
    }
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      body: (block))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (call
          function: (symbol
            name: (identifier))
          arguments: (arguments
            argument: (bitnot
              operator: (bitnot_op)
              argument: (symbol
                name: (identifier)))))))))
