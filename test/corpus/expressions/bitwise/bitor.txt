==================
Simple bitwise OR with hex literals
==================

uint constant x = 0xF0 | 0x0F;

---

(source_file
  definition: (constant_variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (bitwise
      (bitor
        left: (literal
          (hex))
        operator: (bitor_op)
        right: (literal
          (hex))))))

==================
Bitwise OR with variables
==================

contract C {
    function f(uint a, uint b) public pure returns (uint) {
        return a | b;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block
        statement: (return
          value: (bitwise
            (bitor
              left: (symbol
                name: (identifier))
              operator: (bitor_op)
              right: (symbol
                name: (identifier)))))))))

==================
Chained bitwise OR expressions (left-associative)
==================

// Should parse as (a | b) | c
uint constant x = a | b | c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (bitwise
      (bitor
        left: (bitwise
          (bitor
            left: (symbol
              name: (identifier))
            operator: (bitor_op)
            right: (symbol
              name: (identifier))))
        operator: (bitor_op)
        right: (symbol
          name: (identifier))))))

==================
Bitwise OR precedence with XOR and AND (critical test)
==================

// Should parse as a | (b ^ (c & d)) due to precedence
uint constant x = a | b ^ c & d;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (bitwise
      (bitor
        left: (symbol
          name: (identifier))
        operator: (bitor_op)
        right: (bitwise
          (bitxor
            left: (symbol
              name: (identifier))
            operator: (bitxor_op)
            right: (bitwise
              (bitand
                left: (symbol
                  name: (identifier))
                operator: (bitand_op)
                right: (symbol
                  name: (identifier))))))))))

==================
Bitwise OR precedence with logical AND
==================

// Should parse as (a | b) && (c | d)
// Note: This is invalid Solidity as bitwise ops don't produce booleans,
// but the parser should handle the structure correctly for linting.
bool constant x = a | b && c | d;

---

(source_file
  (comment)
  (comment)
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (bool_type))
    name: (symbol
      name: (identifier))
    value: (and
      left: (bitwise
        (bitor
          left: (symbol
            name: (identifier))
          operator: (bitor_op)
          right: (symbol
            name: (identifier))))
      operator: (and_op)
      right: (bitwise
        (bitor
          left: (symbol
            name: (identifier))
          operator: (bitor_op)
          right: (symbol
            name: (identifier)))))))

==================
Bitwise OR with parenthesized logical AND expression
==================

// Should parse as (a | b) && c. Invalid, but should parse.
bool constant x = (a | b) && c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (bool_type))
    name: (symbol
      name: (identifier))
    value: (and
      left: (group
        expression: (bitwise
          (bitor
            left: (symbol
              name: (identifier))
            operator: (bitor_op)
            right: (symbol
              name: (identifier)))))
      operator: (and_op)
      right: (symbol
        name: (identifier)))))

==================
Bitwise OR in an if statement condition
==================

contract C {
    function f(uint a, uint b) public {
        if (a | b > 0) { // Should be parsed as (a | b) > 0
            // ...
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        statement: (if_statement
          condition: (comparison
            left: (bitwise
              (bitor
                left: (symbol
                  name: (identifier))
                operator: (bitor_op)
                right: (symbol
                  name: (identifier))))
            operator: (gt)
            right: (literal
              (number)))
          consequence: (block
            (comment)
            (comment)))))))
