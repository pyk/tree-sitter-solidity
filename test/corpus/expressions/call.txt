==================
Simple function call
==================

contract C {
    function test() {
        myFunction(a, b);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (call
          function: (symbol
            name: (identifier))
          arguments: (arguments
            argument: (symbol
              name: (identifier))
            argument: (symbol
              name: (identifier))))))))

==================
Call with no arguments
==================

contract C {
    function test() {
        doSomething();
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (call
          function: (symbol
            name: (identifier))
          arguments: (arguments))))))

==================
Call as part of a member access
==================

contract C {
    function test() {
        myContract.myFunction();
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (call
          function: (symbol
            scope: (symbol
              name: (identifier))
            name: (identifier))
          arguments: (arguments))))))

==================
Call with value and gas options
==================

contract C {
    function test() {
        other.f{value: 1 ether, gas: 10000}();
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (call
          function: (symbol
            scope: (symbol
              name: (identifier))
            name: (identifier))
          options: (call_options_block
            (named_argument
              name: (symbol
                name: (identifier))
              value: (ether_literal
                value: (number)
                unit: (ether)))
            (named_argument
              name: (symbol
                name: (identifier))
              value: (literal
                (number))))
          arguments: (arguments))))))

==================
Nested function calls
==================

contract C {
    function test() {
        f(g(x));
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (call
          function: (symbol
            name: (identifier))
          arguments: (arguments
            argument: (call
              function: (symbol
                name: (identifier))
              arguments: (arguments
                argument: (symbol
                  name: (identifier))))))))))

==================
Call as return value
==================

contract C {
    function otherFunction() internal pure returns(uint) {}
    function f() public pure returns (uint) {
        return otherFunction();
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (internal)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block
        statement: (return
          value: (call
            function: (symbol
              name: (identifier))
            arguments: (arguments)))))))

==================
Built-in function call: keccak256
==================

contract C {
    function test() {
        bytes32 hash = keccak256("hello");
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (local_variable
          type: (primitive_type
            (bytes_type))
          name: (symbol
            name: (identifier))
          value: (call
            function: (builtin_function
              name: (keccak256))
            arguments: (arguments
              argument: (literal
                (string)))))))))

==================
Built-in function call: require
==================

contract C {
    function test() {
        require(a > b, "a must be greater than b");
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (call
          function: (builtin_function
            name: (require))
          arguments: (arguments
            argument: (comparison
              left: (symbol
                name: (identifier))
              operator: (gt)
              right: (symbol
                name: (identifier)))
            argument: (literal
              (string))))))))

==================
Built-in function call: assert
==================

contract C {
    function test() {
        assert(a == 0);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (call
          function: (builtin_function
            name: (assert))
          arguments: (arguments
            argument: (equality
              left: (symbol
                name: (identifier))
              operator: (equality_op)
              right: (literal
                (number)))))))))

==================
Built-in function call: revert with a custom error
==================

contract C {
    error MyCustomError(uint);
    function test() {
        revert MyCustomError(arg1);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (error
      name: (symbol
        name: (identifier))
      parameters: (error_parameters
        parameter: (error_parameter
          type: (primitive_type
            (uint_type)))))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (revert_error
          error: (symbol
            name: (identifier))
          arguments: (arguments
            argument: (symbol
              name: (identifier))))))))

==================
Call on a casted address
==================

contract MyContract {
    function doThing() public {}
}
contract C {
    function test(address someAddress) {
        MyContract(someAddress).doThing();
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      body: (block)))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (address_type))
          name: (symbol
            name: (identifier))))
      body: (block
        statement: (call
          function: (member_access_expression
            object: (call
              function: (symbol
                name: (identifier))
              arguments: (arguments
                argument: (symbol
                  name: (identifier))))
            member: (identifier))
          arguments: (arguments))))))

==================
New expression call (contract creation)
==================

contract MyContract {}
contract C {
    function test() {
        MyContract c = new MyContract();
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier)))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      body: (block
        statement: (local_variable
          type: (custom_type
            symbol: (symbol
              name: (identifier)))
          name: (symbol
            name: (identifier))
          value: (call
            function: (new_expression
              type: (custom_type
                symbol: (symbol
                  name: (identifier))))
            arguments: (arguments)))))))
