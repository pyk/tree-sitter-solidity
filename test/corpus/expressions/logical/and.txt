==================
Simple AND with boolean literals
==================

bool constant x = true && false;

---

(source_file
  definition: (constant_variable
    type: (primitive_type
      (bool_type))
    name: (symbol
      name: (identifier))
    value: (and
      left: (literal
        (boolean))
      operator: (and_op)
      right: (literal
        (boolean)))))

==================
AND with variables
==================

contract C {
    function f(bool a, bool b) public pure returns (bool) {
        return a && b;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (bool_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (bool_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (bool_type))))
      body: (block
        statement: (return
          value: (and
            left: (symbol
              name: (identifier))
            operator: (and_op)
            right: (symbol
              name: (identifier))))))))

==================
Chained AND expressions (left-associative)
==================

// Should parse as (a && b) && c
bool constant x = a && b && c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (bool_type))
    name: (symbol
      name: (identifier))
    value: (and
      left: (and
        left: (symbol
          name: (identifier))
        operator: (and_op)
        right: (symbol
          name: (identifier)))
      operator: (and_op)
      right: (symbol
        name: (identifier)))))

==================
AND precedence over OR
==================

// Should parse as (a && b) || c
bool constant x = a && b || c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (bool_type))
    name: (symbol
      name: (identifier))
    value: (or
      left: (and
        left: (symbol
          name: (identifier))
        operator: (and_op)
        right: (symbol
          name: (identifier)))
      operator: (or_op)
      right: (symbol
        name: (identifier)))))

==================
AND with comparison and equality expressions
==================

// Should parse as (a > b) && (c == d)
bool constant x = a > b && c == d;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (bool_type))
    name: (symbol
      name: (identifier))
    value: (and
      left: (comparison
        left: (symbol
          name: (identifier))
        operator: (gt)
        right: (symbol
          name: (identifier)))
      operator: (and_op)
      right: (equality
        left: (symbol
          name: (identifier))
        operator: (equality_op)
        right: (symbol
          name: (identifier))))))

==================
AND with a parenthesized OR expression
==================

// Should parse as a && (b || c)
bool constant x = a && (b || c);

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (bool_type))
    name: (symbol
      name: (identifier))
    value: (and
      left: (symbol
        name: (identifier))
      operator: (and_op)
      right: (group
        expression: (or
          left: (symbol
            name: (identifier))
          operator: (or_op)
          right: (symbol
            name: (identifier)))))))

==================
AND in an if statement condition
==================

contract C {
    function f(bool a, bool b) public {
        if (a && b) {
            // ...
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (bool_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (bool_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        statement: (if_statement
          condition: (and
            left: (symbol
              name: (identifier))
            operator: (and_op)
            right: (symbol
              name: (identifier)))
          consequence: (block
            (comment)))))))

==================
AND in a require statement
==================

contract C {
    function f(uint a, uint b) public pure {
        require(a > 0 && b > 0, "Both must be positive");
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (require
          condition: (and
            left: (comparison
              left: (symbol
                name: (identifier))
              operator: (gt)
              right: (literal
                (number)))
            operator: (and_op)
            right: (comparison
              left: (symbol
                name: (identifier))
              operator: (gt)
              right: (literal
                (number))))
          reason: (string))))))

==================
AND in a ternary expression
==================

contract C {
    function f(bool a, bool b) public pure returns (uint) {
        return a && b ? 1 : 0;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (bool_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (bool_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block
        statement: (return
          value: (conditional_expression
            condition: (and
              left: (symbol
                name: (identifier))
              operator: (and_op)
              right: (symbol
                name: (identifier)))
            consequence: (literal
              (number))
            alternative: (literal
              (number))))))))
