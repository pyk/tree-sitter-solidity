==================
Simple left shift with literals
==================

uint constant x = 1 << 8;

---

(source_file
  definition: (constant_variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (shift
      left: (literal
        (number))
      operator: (shift_op)
      right: (literal
        (number)))))

==================
Simple right shift with variables
==================

contract C {
    function f(uint a, uint b) public pure returns (uint) {
        return a >> b;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block
        statement: (return_statement
          value: (shift
            left: (symbol
              name: (identifier))
            operator: (shift_op)
            right: (symbol
              name: (identifier))))))))

==================
Unsigned right shift
==================

uint constant x = 256 >>> 2;

---

(source_file
  definition: (constant_variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (shift
      left: (literal
        (number))
      operator: (shift_op)
      right: (literal
        (number)))))

==================
Chained shift expressions (left-associative)
==================

// Should parse as (a << b) << c
uint constant x = a << b << c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (shift
      left: (shift
        left: (symbol
          name: (identifier))
        operator: (shift_op)
        right: (symbol
          name: (identifier)))
      operator: (shift_op)
      right: (symbol
        name: (identifier)))))

==================
Shift precedence with arithmetic operators (add/mul)
==================

// Should parse as (a * 2) << (b + 1)
uint constant x = a * 2 << b + 1;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (shift
      left: (arithmetic
        (mul
          left: (symbol
            name: (identifier))
          operator: (mul_op)
          right: (literal
            (number))))
      operator: (shift_op)
      right: (arithmetic
        (add
          left: (symbol
            name: (identifier))
          operator: (add_op)
          right: (literal
            (number)))))))

==================
Shift precedence with bitwise AND
==================

// Should parse as (a << b) & c
uint constant x = a << b & c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (bitwise
      (bitand
        left: (shift
          left: (symbol
            name: (identifier))
          operator: (shift_op)
          right: (symbol
            name: (identifier)))
        operator: (bitand_op)
        right: (symbol
          name: (identifier))))))

==================
Shift precedence with comparison operators
==================

// Should parse as (a >> b) < c
bool constant x = a >> b < c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (bool_type))
    name: (symbol
      name: (identifier))
    value: (comparison
      left: (shift
        left: (symbol
          name: (identifier))
        operator: (shift_op)
        right: (symbol
          name: (identifier)))
      operator: (lt)
      right: (symbol
        name: (identifier)))))

==================
Shift with parenthesized bitwise AND
==================

// Should parse as a << (b & MASK)
uint constant x = a << (b & MASK);

---

(source_file
  (comment)
  definition: (constant_variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (shift
      left: (symbol
        name: (identifier))
      operator: (shift_op)
      right: (group
        expression: (bitwise
          (bitand
            left: (symbol
              name: (identifier))
            operator: (bitand_op)
            right: (symbol
              name: (identifier))))))))

==================
Shift in a require statement
==================

contract C {
    function f(uint a) public pure {
        require(a >> 8 > 0, "High bits must be set");
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (call
          function: (builtin_function
            name: (require))
          arguments: (arguments
            argument: (comparison
              left: (shift
                left: (symbol
                  name: (identifier))
                operator: (shift_op)
                right: (literal
                  (number)))
              operator: (gt)
              right: (literal
                (number)))
            argument: (literal
              (string))))))))
