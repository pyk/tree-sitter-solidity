==================
mulmod with literals
==================

contract C {
    function f() public pure {
        uint result = mulmod(10, 20, 7);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (local_variable
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))
          value: (mulmod
            x: (literal
              (number))
            y: (literal
              (number))
            k: (literal
              (number))))))))

==================
mulmod with variables
==================

contract C {
    function f(uint a, uint b, uint m) public pure returns (uint) {
        return mulmod(a, b, m);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block
        statement: (return
          value: (mulmod
            x: (symbol
              name: (identifier))
            y: (symbol
              name: (identifier))
            k: (symbol
              name: (identifier))))))))

==================
mulmod with complex expressions as arguments
==================

contract C {
    function f(uint a, uint b) public pure returns (uint) {
        return mulmod(a * 2, b + 1, 100);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block
        statement: (return
          value: (mulmod
            x: (arithmetic
              (mul
                left: (symbol
                  name: (identifier))
                operator: (mul_op)
                right: (literal
                  (number))))
            y: (arithmetic
              (add
                left: (symbol
                  name: (identifier))
                operator: (add_op)
                right: (literal
                  (number))))
            k: (literal
              (number))))))))

==================
mulmod used in a require statement
==================

contract C {
    function f(uint a, uint b, uint m) public pure {
        require(mulmod(a, b, m) == 0, "No remainder expected");
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (require
          condition: (equality
            left: (mulmod
              x: (symbol
                name: (identifier))
              y: (symbol
                name: (identifier))
              k: (symbol
                name: (identifier)))
            operator: (equality_op)
            right: (literal
              (number)))
          reason: (string))))))
