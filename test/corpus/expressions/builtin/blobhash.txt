==================
blobhash with a literal argument
==================

contract C {
    function f() public view {
        bytes32 hash = blobhash(0);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (view)
      body: (block
        statement: (local_variable
          type: (bytes_type)
          name: (symbol
            name: (identifier))
          value: (blobhash
            index: (literal
              (number))))))))

==================
blobhash with a variable argument
==================

contract C {
    function getHash(uint blobIndex) public view returns (bytes32) {
        return blobhash(blobIndex);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (view)
      returns: (parameters
        parameter: (parameter
          type: (bytes_type)))
      body: (block
        statement: (return
          value: (blobhash
            index: (symbol
              name: (identifier))))))))

==================
blobhash with an expression argument
==================

contract C {
    function f(uint i) public view returns (bytes32) {
        return blobhash(i + 1);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (view)
      returns: (parameters
        parameter: (parameter
          type: (bytes_type)))
      body: (block
        statement: (return
          value: (blobhash
            index: (add
              left: (symbol
                name: (identifier))
              operator: (add_op)
              right: (literal
                (number)))))))))

==================
blobhash in a comparison
==================

contract C {
    function checkHash(uint index, bytes32 h) public view {
        if (blobhash(index) == h) {
            // ...
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (bytes_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (view)
      body: (block
        statement: (if_statement
          condition: (eq
            left: (blobhash
              index: (symbol
                name: (identifier)))
            operator: (eq_op)
            right: (symbol
              name: (identifier)))
          consequence: (block
            (comment)))))))
