==================
Negation of a positive integer literal
==================

int constant x = -1;

---

(source_file
  definition: (constant_variable
    type: (int_type)
    name: (symbol
      name: (identifier))
    value: (negation
      operator: (negation_op)
      argument: (literal
        (number)))))

==================
Negation of a negative integer literal (double negative)
==================

int constant x = -(-1);

---

(source_file
  definition: (constant_variable
    type: (int_type)
    name: (symbol
      name: (identifier))
    value: (negation
      operator: (negation_op)
      argument: (group
        expression: (negation
          operator: (negation_op)
          argument: (literal
            (number)))))))

==================
Negation of a variable
==================

contract C {
    function f(int a) public pure returns (int) {
        return -a;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (int_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (int_type)))
      body: (block
        statement: (return
          value: (negation
            operator: (negation_op)
            argument: (symbol
              name: (identifier))))))))

==================
Negation precedence over exponentiation (right-associative)
==================

// Should parse as (-2)**3
int constant x = -2**3;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (int_type)
    name: (symbol
      name: (identifier))
    value: (exp
      left: (negation
        operator: (negation_op)
        argument: (literal
          (number)))
      operator: (exp_op)
      right: (literal
        (number)))))

==================
Negation precedence with multiplication
==================

// Should parse as (-2) * 3
int constant x = -2 * 3;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (int_type)
    name: (symbol
      name: (identifier))
    value: (mul
      left: (negation
        operator: (negation_op)
        argument: (literal
          (number)))
      operator: (mul_op)
      right: (literal
        (number)))))

==================
Negation precedence with addition
==================

// Should parse as (-2) + 3
int constant x = -2 + 3;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (int_type)
    name: (symbol
      name: (identifier))
    value: (add
      left: (negation
        operator: (negation_op)
        argument: (literal
          (number)))
      operator: (add_op)
      right: (literal
        (number)))))

==================
Addition with a negated right-hand side
==================

// Should parse as 2 + (-3)
int constant x = 2 + -3;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (int_type)
    name: (symbol
      name: (identifier))
    value: (add
      left: (literal
        (number))
      operator: (add_op)
      right: (negation
        operator: (negation_op)
        argument: (literal
          (number))))))

==================
Negation of a parenthesized arithmetic expression
==================

// Should apply negation to the result of (2 * 3)
int constant x = -(2 * 3);

---

(source_file
  (comment)
  definition: (constant_variable
    type: (int_type)
    name: (symbol
      name: (identifier))
    value: (negation
      operator: (negation_op)
      argument: (group
        expression: (mul
          left: (literal
            (number))
          operator: (mul_op)
          right: (literal
            (number)))))))

==================
Negation inside a comparison expression
==================

bool constant b = -5 < -2;

---

(source_file
  definition: (constant_variable
    type: (bool_type)
    name: (symbol
      name: (identifier))
    value: (comparison
      left: (negation
        operator: (negation_op)
        argument: (literal
          (number)))
      operator: (lt)
      right: (negation
        operator: (negation_op)
        argument: (literal
          (number))))))

==================
Negation inside a logical expression
==================

contract C {
    function f(int a, int b) public pure returns (bool) {
        return -a > 0 && -b < 0;
    }
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (int_type)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (int_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (bool_type)))
      body: (block
        statement: (return
          value: (and
            left: (comparison
              left: (negation
                operator: (negation_op)
                argument: (symbol
                  name: (identifier)))
              operator: (gt)
              right: (literal
                (number)))
            operator: (and_op)
            right: (comparison
              left: (negation
                operator: (negation_op)
                argument: (symbol
                  name: (identifier)))
              operator: (lt)
              right: (literal
                (number)))))))))

==================
Negation in a require statement
==================

contract C {
    function f(int a) public pure {
        require(-a > 0, "must be negative");
    }
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (int_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (require
          condition: (comparison
            left: (negation
              operator: (negation_op)
              argument: (symbol
                name: (identifier)))
            operator: (gt)
            right: (literal
              (number)))
          reason: (string))))))
