==================
Negation of a positive integer literal
==================

int x = -1;

---

(source_file
  definition: (variable
    type: (primitive_type
      (int_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (negation
        operator: (negation_op)
        argument: (literal
          (number))))))

==================
Negation of a negative integer literal (double negative)
==================

int x = -(-1);

---

(source_file
  definition: (variable
    type: (primitive_type
      (int_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (negation
        operator: (negation_op)
        argument: (group
          expression: (arithmetic
            (negation
              operator: (negation_op)
              argument: (literal
                (number)))))))))

==================
Negation of a variable
==================

contract C {
    function f(int a) public pure returns (int) {
        return -a;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (int_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (int_type))))
      body: (block
        (return_statement
          value: (arithmetic
            (negation
              operator: (negation_op)
              argument: (symbol
                name: (identifier)))))))))

==================
Negation precedence over exponentiation (right-associative)
==================

// Should parse as (-2)**3
int x = -2**3;

---

(source_file
  (comment)
  definition: (variable
    type: (primitive_type
      (int_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (exp
        left: (arithmetic
          (negation
            operator: (negation_op)
            argument: (literal
              (number))))
        operator: (exp_op)
        right: (literal
          (number))))))

==================
Negation precedence with multiplication
==================

// Should parse as (-2) * 3
int x = -2 * 3;

---

(source_file
  (comment)
  definition: (variable
    type: (primitive_type
      (int_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (mul
        left: (arithmetic
          (negation
            operator: (negation_op)
            argument: (literal
              (number))))
        operator: (mul_op)
        right: (literal
          (number))))))

==================
Negation precedence with addition
==================

// Should parse as (-2) + 3
int x = -2 + 3;

---

(source_file
  (comment)
  definition: (variable
    type: (primitive_type
      (int_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (add
        left: (arithmetic
          (negation
            operator: (negation_op)
            argument: (literal
              (number))))
        operator: (add_op)
        right: (literal
          (number))))))

==================
Addition with a negated right-hand side
==================

// Should parse as 2 + (-3)
int x = 2 + -3;

---

(source_file
  (comment)
  definition: (variable
    type: (primitive_type
      (int_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (add
        left: (literal
          (number))
        operator: (add_op)
        right: (arithmetic
          (negation
            operator: (negation_op)
            argument: (literal
              (number))))))))

==================
Negation of a parenthesized arithmetic expression
==================

// Should apply negation to the result of (2 * 3)
int x = -(2 * 3);

---

(source_file
  (comment)
  definition: (variable
    type: (primitive_type
      (int_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (negation
        operator: (negation_op)
        argument: (group
          expression: (arithmetic
            (mul
              left: (literal
                (number))
              operator: (mul_op)
              right: (literal
                (number)))))))))

==================
Negation inside a comparison expression
==================

bool b = -5 < -2;

---

(source_file
  definition: (variable
    type: (primitive_type
      (bool_type))
    name: (symbol
      name: (identifier))
    value: (comparison
      left: (arithmetic
        (negation
          operator: (negation_op)
          argument: (literal
            (number))))
      operator: (comparison_op)
      right: (arithmetic
        (negation
          operator: (negation_op)
          argument: (literal
            (number)))))))

==================
Negation inside a logical expression
==================

contract C {
    function f(int a, int b) public pure returns (bool) {
        return -a > 0 && -b < 0;
    }
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (int_type))
          name: (identifier))
        parameter: (parameter
          type: (primitive_type
            (int_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (bool_type))))
      body: (block
        (return_statement
          value: (and
            left: (comparison
              left: (arithmetic
                (negation
                  operator: (negation_op)
                  argument: (symbol
                    name: (identifier))))
              operator: (comparison_op)
              right: (literal
                (number)))
            operator: (and_op)
            right: (comparison
              left: (arithmetic
                (negation
                  operator: (negation_op)
                  argument: (symbol
                    name: (identifier))))
              operator: (comparison_op)
              right: (literal
                (number)))))))))

==================
Negation in a require statement
==================

contract C {
    function f(int a) public pure {
        require(-a > 0, "must be negative");
    }
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (int_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      body: (block
        (expression_statement
          (call_expression
            function: (symbol
              name: (identifier))
            arguments: (argument_list
              argument: (comparison
                left: (arithmetic
                  (negation
                    operator: (negation_op)
                    argument: (symbol
                      name: (identifier))))
                operator: (comparison_op)
                right: (literal
                  (number)))
              argument: (literal
                (string)))))))))
