==================
Simple addition with number literals
==================

uint constant x = 10 + 20;

---

(source_file
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (add
      left: (literal
        (number))
      operator: (add_op)
      right: (literal
        (number)))))

==================
Simple subtraction with variables
==================

contract C {
    function f(int a, int b) public pure returns (int) {
        return a - b;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (int_type)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (int_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (int_type)))
      body: (block
        statement: (return
          value: (sub
            left: (symbol
              name: (identifier))
            operator: (sub_op)
            right: (symbol
              name: (identifier))))))))

==================
Chained addition and subtraction (left-associative)
==================

// Should parse as ((a + b) - c) + d
uint constant x = a + b - c + d;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (add
      left: (sub
        left: (add
          left: (symbol
            name: (identifier))
          operator: (add_op)
          right: (symbol
            name: (identifier)))
        operator: (sub_op)
        right: (symbol
          name: (identifier)))
      operator: (add_op)
      right: (symbol
        name: (identifier)))))

==================
Addition precedence with multiplication (critical test)
==================

// Should parse as a + (b * c)
uint constant x = a + b * c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (add
      left: (symbol
        name: (identifier))
      operator: (add_op)
      right: (mul
        left: (symbol
          name: (identifier))
        operator: (mul_op)
        right: (symbol
          name: (identifier))))))

==================
Addition precedence with exponentiation
==================

// Should parse as a + (b ** c)
uint constant x = a + b ** c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (add
      left: (symbol
        name: (identifier))
      operator: (add_op)
      right: (exp
        left: (symbol
          name: (identifier))
        operator: (exp_op)
        right: (symbol
          name: (identifier))))))

==================
Addition precedence with shift operators
==================

// Should parse as (a + b) << c
uint constant x = a + b << c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (shift
      left: (add
        left: (symbol
          name: (identifier))
        operator: (add_op)
        right: (symbol
          name: (identifier)))
      operator: (shift_op)
      right: (symbol
        name: (identifier)))))

==================
Addition precedence with comparison operators
==================

// Should parse as (a + b) > c
bool constant x = a + b > c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (bool_type)
    name: (symbol
      name: (identifier))
    value: (comparison
      left: (add
        left: (symbol
          name: (identifier))
        operator: (add_op)
        right: (symbol
          name: (identifier)))
      operator: (gt)
      right: (symbol
        name: (identifier)))))

==================
Addition with a parenthesized expression
==================

// Should parse as a * (b + c)
uint constant x = a * (b + c);

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (mul
      left: (symbol
        name: (identifier))
      operator: (mul_op)
      right: (group
        expression: (add
          left: (symbol
            name: (identifier))
          operator: (add_op)
          right: (symbol
            name: (identifier)))))))

==================
Subtraction used in a require statement
==================

contract C {
    function f(uint a, uint b) public pure {
        require(a - b > 0, "a must be greater than b");
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (require
          condition: (comparison
            left: (sub
              left: (symbol
                name: (identifier))
              operator: (sub_op)
              right: (symbol
                name: (identifier)))
            operator: (gt)
            right: (literal
              (number)))
          reason: (string))))))
