==================
Simple exponentiation with number literals
==================

uint constant x = 2 ** 8;

---

(source_file
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (exp
      left: (literal
        (number))
      operator: (exp_op)
      right: (literal
        (number)))))

==================
Exponentiation with variables
==================

contract C {
    function f(uint base, uint exponent) public pure returns (uint) {
        return base ** exponent;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (uint_type)))
      body: (block
        statement: (return
          value: (exp
            left: (symbol
              name: (identifier))
            operator: (exp_op)
            right: (symbol
              name: (identifier))))))))

==================
Chained exponentiation (right-associative)
==================

// Should parse as a ** (b ** c)
uint constant x = a ** b ** c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (exp
      left: (symbol
        name: (identifier))
      operator: (exp_op)
      right: (exp
        left: (symbol
          name: (identifier))
        operator: (exp_op)
        right: (symbol
          name: (identifier))))))

==================
Exponentiation precedence with multiplication
==================

// Should parse as (a ** b) * c
uint constant x = a ** b * c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (mul
      left: (exp
        left: (symbol
          name: (identifier))
        operator: (exp_op)
        right: (symbol
          name: (identifier)))
      operator: (mul_op)
      right: (symbol
        name: (identifier)))))

==================
Exponentiation precedence with addition
==================

// Should parse as a + (b ** c)
uint constant x = a + b ** c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (add
      left: (symbol
        name: (identifier))
      operator: (add_op)
      right: (exp
        left: (symbol
          name: (identifier))
        operator: (exp_op)
        right: (symbol
          name: (identifier))))))

==================
Exponentiation with a unary minus (critical test)
==================

// Should parse as (-a) ** b because unary minus has higher precedence
int constant x = -a ** b;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (int_type)
    name: (symbol
      name: (identifier))
    value: (exp
      left: (negation
        operator: (negation_op)
        argument: (symbol
          name: (identifier)))
      operator: (exp_op)
      right: (symbol
        name: (identifier)))))

==================
Exponentiation with a parenthesized expression as base
==================

// Should parse as (a + b) ** c
uint constant x = (a + b) ** c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (exp
      left: (group
        expression: (add
          left: (symbol
            name: (identifier))
          operator: (add_op)
          right: (symbol
            name: (identifier))))
      operator: (exp_op)
      right: (symbol
        name: (identifier)))))

==================
Exponentiation in a require statement
==================

contract C {
    function f(uint a) public pure {
        require(2 ** a < 1024, "Too large");
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (require
          condition: (comparison
            left: (exp
              left: (literal
                (number))
              operator: (exp_op)
              right: (symbol
                name: (identifier)))
            operator: (lt)
            right: (literal
              (number)))
          reason: (string))))))
