==================
Prefix increment as a statement
==================

contract C {
    function f(uint a) public {
        ++a;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        (expression_statement
          (arithmetic
            (increment
              (prefix_increment
                operator: (increment_op)
                argument: (symbol
                  name: (identifier))))))))))

==================
Postfix increment as a statement
==================

contract C {
    function f(uint a) public {
        a++;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        (expression_statement
          (arithmetic
            (increment
              (postfix_increment
                argument: (symbol
                  name: (identifier))
                operator: (increment_op)))))))))

==================
Prefix increment in an assignment
==================

// b should be assigned the value of a AFTER it is incremented
contract C {
    function f(uint a) public returns (uint b) {
        b = ++a;
    }
}

---

(source_file
  (comment)
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      body: (block
        (expression_statement
          (assignment_expression
            left: (symbol
              name: (identifier))
            operator: (simple_assignment_operator)
            right: (arithmetic
              (increment
                (prefix_increment
                  operator: (increment_op)
                  argument: (symbol
                    name: (identifier)))))))))))

==================
Postfix increment in an assignment
==================

// b should be assigned the value of a BEFORE it is incremented
contract C {
    function f(uint a) public returns (uint b) {
        b = a++;
    }
}

---

(source_file
  (comment)
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      body: (block
        (expression_statement
          (assignment_expression
            left: (symbol
              name: (identifier))
            operator: (simple_assignment_operator)
            right: (arithmetic
              (increment
                (postfix_increment
                  argument: (symbol
                    name: (identifier))
                  operator: (increment_op))))))))))

==================
Postfix increment of an array element
==================

contract C {
    function f(uint[] memory arr) public {
        arr[0]++;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (array_type
            base: (primitive_type
              (uint_type)))
          location: (memory)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        (expression_statement
          (arithmetic
            (increment
              (postfix_increment
                argument: (index_access_expression
                  base: (symbol
                    name: (identifier))
                  index: (literal
                    (number)))
                operator: (increment_op)))))))))

==================
Prefix increment precedence vs multiplication
==================

// Should parse as (++a) * b because prefix unary has high precedence
contract C {
    function f(uint a, uint b) public pure returns (uint) {
        return ++a * b;
    }
}

---

(source_file
  (comment)
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block
        (return_statement
          value: (arithmetic
            (mul
              left: (arithmetic
                (increment
                  (prefix_increment
                    operator: (increment_op)
                    argument: (symbol
                      name: (identifier)))))
              operator: (mul_op)
              right: (symbol
                name: (identifier)))))))))

==================
Postfix increment precedence vs member access (critical test)
==================

// Should parse as (a.length)++ because member access has higher precedence
contract C {
    struct S { uint length; }
    function f(S storage s) public {
        s.length++;
    }
}

---

(source_file
  (comment)
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier))
      member: (struct_member
        type: (primitive_type
          (uint_type))
        name: (symbol
          name: (identifier))))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (custom_type
            symbol: (symbol
              name: (identifier)))
          location: (storage)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        (expression_statement
          (arithmetic
            (increment
              (postfix_increment
                argument: (symbol
                  scope: (symbol
                    name: (identifier))
                  name: (identifier))
                operator: (increment_op)))))))))

==================
Increment in a for loop
==================

contract C {
    function f() public pure {
        for (uint i = 0; i < 10; i++) {
            // loop
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (pure)
      body: (block
        (for_statement
          initializer: (variable_declaration_statement
            declaration: (variable_declaration
              type: (primitive_type
                (uint_type))
              name: (symbol
                name: (identifier)))
            value: (literal
              (number)))
          condition: (comparison
            left: (symbol
              name: (identifier))
            operator: (comparison_op)
            right: (literal
              (number)))
          update: (arithmetic
            (increment
              (postfix_increment
                argument: (symbol
                  name: (identifier))
                operator: (increment_op))))
          body: (block
            (comment)))))))
