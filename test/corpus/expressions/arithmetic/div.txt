==================
Simple division with number literals
==================

uint x = 100 / 5;

---

(source_file
  definition: (variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (div
        left: (literal
          (number))
        operator: (div_op)
        right: (literal
          (number))))))

==================
Division with variables
==================

contract C {
    function f(uint a, uint b) public pure returns (uint) {
        return a / b;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (identifier))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block
        (return_statement
          value: (arithmetic
            (div
              left: (symbol
                name: (identifier))
              operator: (div_op)
              right: (symbol
                name: (identifier)))))))))

==================
Chained division and multiplication (left-associative)
==================

// Should parse as ((100 / 5) * 2)
uint x = 100 / 5 * 2;

---

(source_file
  (comment)
  definition: (variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (mul
        left: (arithmetic
          (div
            left: (literal
              (number))
            operator: (div_op)
            right: (literal
              (number))))
        operator: (mul_op)
        right: (literal
          (number))))))

==================
Division precedence with exponentiation (critical test)
==================

// Should parse as a / (b ** c)
uint x = a / b ** c;

---

(source_file
  (comment)
  definition: (variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (div
        left: (symbol
          name: (identifier))
        operator: (div_op)
        right: (arithmetic
          (exp
            left: (symbol
              name: (identifier))
            operator: (exp_op)
            right: (symbol
              name: (identifier))))))))

==================
Division precedence with subtraction (critical test)
==================

// Should parse as (a / b) - c
uint x = a / b - c;

---

(source_file
  (comment)
  definition: (variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (sub
        left: (arithmetic
          (div
            left: (symbol
              name: (identifier))
            operator: (div_op)
            right: (symbol
              name: (identifier))))
        operator: (sub_op)
        right: (symbol
          name: (identifier))))))

==================
Division with a parenthesized expression
==================

// Should parse as a / (b - c)
uint x = a / (b - c);

---

(source_file
  (comment)
  definition: (variable
    type: (primitive_type
      (uint_type))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (div
        left: (symbol
          name: (identifier))
        operator: (div_op)
        right: (group
          expression: (arithmetic
            (sub
              left: (symbol
                name: (identifier))
              operator: (sub_op)
              right: (symbol
                name: (identifier)))))))))

==================
Division in an if statement condition
==================

contract C {
    function f(uint a, uint b) public pure {
        if (a / b == 2) {
            // ...
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (identifier))
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      body: (block
        (if_statement
          condition: (equality
            left: (arithmetic
              (div
                left: (symbol
                  name: (identifier))
                operator: (div_op)
                right: (symbol
                  name: (identifier))))
            operator: (equality_op)
            right: (literal
              (number)))
          consequence: (block
            (comment)))))))

==================
Division in a compound assignment
==================

contract C {
    function f(uint a) public {
        a /= 2;
    }
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (identifier)))
      visibility: (visibility)
      body: (block
        (expression_statement
          (assignment_expression
            left: (symbol
              name: (identifier))
            operator: (compound_assignment_operator)
            right: (literal
              (number))))))))
