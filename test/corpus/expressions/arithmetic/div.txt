==================
Simple division with number literals
==================

uint constant x = 100 / 5;

---

(source_file
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (div
      left: (literal
        (number))
      operator: (div_op)
      right: (literal
        (number)))))

==================
Division with variables
==================

contract C {
    function f(uint a, uint b) public pure returns (uint) {
        return a / b;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (uint_type)))
      body: (block
        statement: (return
          value: (div
            left: (symbol
              name: (identifier))
            operator: (div_op)
            right: (symbol
              name: (identifier))))))))

==================
Chained division and multiplication (left-associative)
==================

// Should parse as ((100 / 5) * 2)
uint constant x = 100 / 5 * 2;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (mul
      left: (div
        left: (literal
          (number))
        operator: (div_op)
        right: (literal
          (number)))
      operator: (mul_op)
      right: (literal
        (number)))))

==================
Division precedence with exponentiation (critical test)
==================

// Should parse as a / (b ** c)
uint constant x = a / b ** c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (div
      left: (symbol
        name: (identifier))
      operator: (div_op)
      right: (exp
        left: (symbol
          name: (identifier))
        operator: (exp_op)
        right: (symbol
          name: (identifier))))))

==================
Division precedence with subtraction (critical test)
==================

// Should parse as (a / b) - c
uint constant x = a / b - c;

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (sub
      left: (div
        left: (symbol
          name: (identifier))
        operator: (div_op)
        right: (symbol
          name: (identifier)))
      operator: (sub_op)
      right: (symbol
        name: (identifier)))))

==================
Division with a parenthesized expression
==================

// Should parse as a / (b - c)
uint constant x = a / (b - c);

---

(source_file
  (comment)
  definition: (constant_variable
    type: (uint_type)
    name: (symbol
      name: (identifier))
    value: (div
      left: (symbol
        name: (identifier))
      operator: (div_op)
      right: (group
        expression: (sub
          left: (symbol
            name: (identifier))
          operator: (sub_op)
          right: (symbol
            name: (identifier)))))))

==================
Division in an if statement condition
==================

contract C {
    function f(uint a, uint b) public pure {
        if (a / b == 2) {
            // ...
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (if_statement
          condition: (equality
            left: (div
              left: (symbol
                name: (identifier))
              operator: (div_op)
              right: (symbol
                name: (identifier)))
            operator: (equality_op)
            right: (literal
              (number)))
          consequence: (block
            (comment)))))))

==================
Division in a compound assignment
==================

contract C {
    function f(uint a) public {
        a /= 2;
    }
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        statement: (assignment
          left: (symbol
            name: (identifier))
          operator: (div_assign_op)
          right: (literal
            (number)))))))
