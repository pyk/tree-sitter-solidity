==================
User-defined type as a state variable (Struct)
==================

contract C {
  struct MyStruct {}
  MyStruct myVar;
}

---

(source_file
  (contract
    name: (identifier)
    struct: (struct
      name: (identifier))
    storage: (storage
      type: (user_defined_type
        (identifier_path
          (identifier)))
      name: (identifier))))

==================
User-defined type as a function parameter (Enum)
==================

contract C {
  enum MyEnum { A, B }
  function process(MyEnum status) public {}
}

---

(source_file
  (contract
    name: (identifier)
    enum: (enum
      name: (identifier)
      value: (identifier)
      value: (identifier))
    function: (function
      name: (identifier)
      parameters: (parameter_list
        (parameter_declaration
          type: (user_defined_type
            (identifier_path
              (identifier)))
          name: (identifier)))
      visibility: (visibility)
      body: (block))))

==================
User-defined type as a return value (Contract)
==================

contract OtherContract {}
contract C {
  function getContract() public returns (OtherContract) {}
}

---

(source_file
  (contract
    name: (identifier))
  (contract
    name: (identifier)
    function: (function
      name: (identifier)
      visibility: (visibility)
      returns: (parameter_list
        (parameter_declaration
          type: (user_defined_type
            (identifier_path
              (identifier)))))
      body: (block))))

==================
User-defined type in an array
==================

contract C {
  struct Point {}
  Point[] myPoints;
}

---

(source_file
  (contract
    name: (identifier)
    struct: (struct
      name: (identifier))
    storage: (storage
      type: (array_type
        base: (user_defined_type
          (identifier_path
            (identifier))))
      name: (identifier))))

==================
Namespaced user-defined type
==================
import "./Parent.sol";

contract C {
  function f(Parent.NestedStruct s) public {}
}

---

(source_file
  (import_directive
    path: (string_literal))
  (contract
    name: (identifier)
    function: (function
      name: (identifier)
      parameters: (parameter_list
        (parameter_declaration
          type: (user_defined_type
            (identifier_path
              (identifier)
              (identifier)))
          name: (identifier)))
      visibility: (visibility)
      body: (block))))
