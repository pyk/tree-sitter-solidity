==================
Simple contract definition
==================

contract MyContract {}

---

(source_file
  (contract
    name: (identifier)))

==================
Abstract contract
==================

abstract contract MyAbstractContract {}

---

(source_file
  (contract
    name: (identifier)))

==================
Contract with simple inheritance
==================

contract MyContract is Ownable, ReentrancyGuard {}

---

(source_file
  (contract
    name: (identifier)
    parents: (parent_list
      (parent
        name: (identifier_path
          (identifier)))
      (parent
        name: (identifier_path
          (identifier))))))

==================
Contract with namespaced inheritance
==================

import "./Parent.sol";

contract Child is Parent.DeepParent {}

---

(source_file
  (import_directive
    path: (string_literal))
  (contract
    name: (identifier)
    parents: (parent_list
      (parent
        name: (identifier_path
          (identifier)
          (identifier))))))

==================
Contract with constructor arguments
==================

contract MyToken is ERC20("My Token", "MTK") {}

---

(source_file
  (contract
    name: (identifier)
    parents: (parent_list
      (parent
        name: (identifier_path
          (identifier))
        arguments: (call_argument_list
          (primary_expression
            (literal
              (string_literal)))
          (primary_expression
            (literal
              (string_literal))))))))

==================
Contract with empty constructor arguments
==================

contract MyContract is ReentrancyGuard() {}

---

(source_file
  (contract
    name: (identifier)
    parents: (parent_list
      (parent
        name: (identifier_path
          (identifier))
        arguments: (call_argument_list)))))

==================
Contract with mixed inheritance styles
==================

contract MegaContract is Ownable, Parent.DeepParent, ERC20("Mega", "MGA"), Lockable() {}

---

(source_file
  (contract
    name: (identifier)
    parents: (parent_list
      (parent
        name: (identifier_path
          (identifier)))
      (parent
        name: (identifier_path
          (identifier)
          (identifier)))
      (parent
        name: (identifier_path
          (identifier))
        arguments: (call_argument_list
          (primary_expression
            (literal
              (string_literal)))
          (primary_expression
            (literal
              (string_literal)))))
      (parent
        name: (identifier_path
          (identifier))
        arguments: (call_argument_list)))))
