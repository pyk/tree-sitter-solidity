==================
Array as a state variable
==================

contract C {
  uint[] myDynamicArray;
  bool[5] myFixedArray;
  address[][3] my2DArray;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (array_type
        base: (primitive_type
          (uint_type)))
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (array_type
        base: (primitive_type
          (bool_type))
        size: (literal
          (number)))
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (array_type
        base: (array_type
          base: (primitive_type
            (address_type)))
        size: (literal
          (number)))
      name: (symbol
        name: (identifier)))))

==================
Array as a function parameter and return type
==================

contract C {
  function process(string[][] calldata data) public pure returns (bytes[] memory) {
    // ...
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (array_type
            base: (array_type
              base: (primitive_type
                (string_type))))
          location: (calldata)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (array_type
            base: (primitive_type
              (bytes_type)))
          location: (memory)))
      body: (block
        (comment)))))

==================
Array in a struct definition
==================

contract C {
  struct MyData {
    uint[] values;
    bytes32[4] hashes;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier))
      member: (struct_member
        type: (array_type
          base: (primitive_type
            (uint_type)))
        name: (symbol
          name: (identifier)))
      member: (struct_member
        type: (array_type
          base: (primitive_type
            (bytes_type))
          size: (literal
            (number)))
        name: (symbol
          name: (identifier))))))

==================
Array as a mapping value
==================

contract C {
  mapping(address => int[]) private balances;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (address_type))
        value: (array_type
          base: (primitive_type
            (int_type))))
      visibility: (private)
      name: (symbol
        name: (identifier)))))

==================
Deeply nested multi-dimensional array
==================

contract C {
    struct MyStruct {}
    MyStruct[][5][] public data;
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (array_type
        base: (array_type
          base: (array_type
            base: (custom_type
              symbol: (symbol
                name: (identifier))))
          size: (literal
            (number))))
      visibility: (public)
      name: (symbol
        name: (identifier)))))

==================
Array of mappings (storage only)
==================

contract C {
    mapping(address => uint)[] public userBalances;
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (array_type
        base: (mapping_type
          key: (primitive_type
            (address_type))
          value: (primitive_type
            (uint_type))))
      visibility: (public)
      name: (symbol
        name: (identifier)))))

==================
Array in a 'using for' directive
==================

library ArrayLib {}
using ArrayLib for uint[];
using ArrayLib for uint[2];

---

(source_file
  definition: (library
    name: (symbol
      name: (identifier)))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (array_type
        base: (primitive_type
          (uint_type)))))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (array_type
        base: (primitive_type
          (uint_type))
        size: (literal
          (number))))))

==================
Array in an event parameter
==================

contract C {
  event DataProcessed(uint[] data, bool[3] flags);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (event
      name: (symbol
        name: (identifier))
      parameters: (event_parameters
        parameter: (event_parameter
          type: (array_type
            base: (primitive_type
              (uint_type)))
          name: (symbol
            name: (identifier)))
        parameter: (event_parameter
          type: (array_type
            base: (primitive_type
              (bool_type))
            size: (literal
              (number)))
          name: (symbol
            name: (identifier)))))))

==================
Array in an error parameter
==================

contract C {
  error InvalidArray(bytes[] data);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (error
      name: (symbol
        name: (identifier))
      parameters: (error_parameters
        parameter: (error_parameter
          type: (array_type
            base: (primitive_type
              (bytes_type)))
          name: (symbol
            name: (identifier)))))))
