==================
Bytes as a state variable
==================

contract C {
  bytes myBytes;
  bytes1 myByte1;
  bytes32 myBytes32;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (primitive_type
        (bytes_type))
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (primitive_type
        (bytes_type))
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (primitive_type
        (bytes_type))
      name: (symbol
        name: (identifier)))))

==================
Bytes as a function parameter and return type
==================

contract C {
  function process(bytes calldata input, bytes4 fixedInput) public pure returns (bytes memory, bytes1) {
    return (input, fixedInput[0]);
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (bytes_type))
          location: (calldata)
          name: (symbol
            name: (identifier)))
        parameter: (parameter
          type: (primitive_type
            (bytes_type))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (bytes_type))
          location: (memory))
        parameter: (parameter
          type: (primitive_type
            (bytes_type))))
      body: (block
        statement: (return_statement
          value: (tuple_expression
            (symbol
              name: (identifier))
            (index_access_expression
              base: (symbol
                name: (identifier))
              index: (literal
                (number)))))))))

==================
Bytes as a local variable
==================

contract C {
  function f() public pure {
    bytes memory localData = hex"123456";
    bytes32 localHash = 0x123;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (variable_declaration_statement
          declaration: (variable_declaration
            type: (primitive_type
              (bytes_type))
            location: (memory)
            name: (symbol
              name: (identifier)))
          value: (literal
            (hex_string)))
        statement: (variable_declaration_statement
          declaration: (variable_declaration
            type: (primitive_type
              (bytes_type))
            name: (symbol
              name: (identifier)))
          value: (literal
            (hex)))))))

==================
Bytes in a type cast
==================

contract C {
  function f(string memory s) public pure returns (bytes memory) {
    return bytes(s);
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (string_type))
          location: (memory)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (bytes_type))
          location: (memory)))
      body: (block
        statement: (return_statement
          value: (cast
            type: (primitive_type
              (bytes_type))
            argument: (symbol
              name: (identifier))))))))

==================
Bytes in a struct definition
==================

contract C {
  struct MyData {
    bytes data;
    bytes32 id;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier))
      member: (struct_member
        type: (primitive_type
          (bytes_type))
        name: (symbol
          name: (identifier)))
      member: (struct_member
        type: (primitive_type
          (bytes_type))
        name: (symbol
          name: (identifier))))))

==================
Bytes in a mapping definition (key must be fixed-size)
==================

contract C {
  mapping(bytes32 => bytes) dataStore;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (bytes_type))
        value: (primitive_type
          (bytes_type)))
      name: (symbol
        name: (identifier)))))

==================
Bytes as an array base type
==================

contract C {
  bytes[] public dataChunks;
  bytes32[3] public hashes;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (array_type
        base: (primitive_type
          (bytes_type)))
      visibility: (public)
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (array_type
        base: (primitive_type
          (bytes_type))
        size: (literal
          (number)))
      visibility: (public)
      name: (symbol
        name: (identifier)))))

==================
Bytes in a 'using for' directive
==================

library BytesUtils {}
using BytesUtils for bytes;

---

(source_file
  definition: (library
    name: (symbol
      name: (identifier)))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (primitive_type
        (bytes_type)))))

==================
Bytes as a constant variable
==================

contract C {
  bytes32 constant MY_HASH = 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (primitive_type
        (bytes_type))
      mutability: (constant)
      name: (symbol
        name: (identifier))
      value: (literal
        (hex)))))

==================
Bytes in an event parameter
==================

contract C {
  event DataReceived(bytes32 indexed topic, bytes data);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (event
      name: (symbol
        name: (identifier))
      parameters: (event_parameters
        parameter: (event_parameter
          type: (primitive_type
            (bytes_type))
          indexed: (indexed)
          name: (symbol
            name: (identifier)))
        parameter: (event_parameter
          type: (primitive_type
            (bytes_type))
          name: (symbol
            name: (identifier)))))))

==================
Bytes in an error parameter
==================

contract C {
  error InvalidData(bytes received);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (error
      name: (symbol
        name: (identifier))
      parameters: (error_parameters
        parameter: (error_parameter
          type: (primitive_type
            (bytes_type))
          name: (symbol
            name: (identifier)))))))

==================
Bytes as underlying type for UDVT
==================

type Hash is bytes32;

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (primitive_type
      (bytes_type))))
