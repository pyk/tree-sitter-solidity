==================
Int as a state variable
==================

contract C {
  int myVar;
  int8 myVar8;
  int256 myVar256;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (primitive_type
        (int_type))
      name: (symbol
        name: (identifier)))
    variable: (variable
      type: (primitive_type
        (int_type))
      name: (symbol
        name: (identifier)))
    variable: (variable
      type: (primitive_type
        (int_type))
      name: (symbol
        name: (identifier)))))

==================
Int as a function parameter and return type
==================

contract C {
  function process(int128 input) public pure returns (int result) {
    return int(input);
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (int_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (int_type))
          name: (identifier)))
      body: (block
        (return_statement
          value: (cast
            type: (primitive_type
              (int_type))
            argument: (symbol
              name: (identifier))))))))

==================
Int as a local variable
==================

contract C {
  function f() public pure {
    int localCounter = -100;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      visibility: (visibility)
      mutability: (state_mutability)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (primitive_type
              (int_type))
            name: (symbol
              name: (identifier)))
          value: (arithmetic
            (negation
              operator: (negation_op)
              argument: (literal
                (number)))))))))

==================
Int in a type cast
==================

contract C {
  function f(uint8 u) public pure returns (int8) {
    return int8(u);
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (int_type))))
      body: (block
        (return_statement
          value: (cast
            type: (primitive_type
              (int_type))
            argument: (symbol
              name: (identifier))))))))

==================
Int in a struct definition
==================

contract C {
  struct MyStruct {
    int id;
    int256 value;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    struct: (struct
      name: (symbol
        name: (identifier))
      member: (struct_member
        type: (primitive_type
          (int_type))
        name: (symbol
          name: (identifier)))
      member: (struct_member
        type: (primitive_type
          (int_type))
        name: (symbol
          name: (identifier))))))

==================
Int in a mapping definition
==================

contract C {
  mapping(int => int256) balances;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (mapping_type
        key: (primitive_type
          (int_type))
        value: (primitive_type
          (int_type)))
      name: (symbol
        name: (identifier)))))

==================
Int as an array base type
==================

contract C {
  int[] public numbers;
  int[5] public fixedNumbers;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (array_type
        base: (primitive_type
          (int_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))
    variable: (variable
      type: (array_type
        base: (primitive_type
          (int_type))
        size: (literal
          (number)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Int in a 'using for' directive
==================

library MathUtils {}
using MathUtils for int;

---

(source_file
  definition: (library
    name: (symbol
      name: (identifier)))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (primitive_type
        (int_type)))))

==================
Int as a constant and immutable variable
==================

contract C {
  int constant MY_CONST = -100;
  int128 public immutable MY_IMMUTABLE = -200;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (primitive_type
        (int_type))
      mutability: (mutability)
      name: (symbol
        name: (identifier))
      value: (arithmetic
        (negation
          operator: (negation_op)
          argument: (literal
            (number)))))
    variable: (variable
      type: (primitive_type
        (int_type))
      visibility: (visibility)
      mutability: (mutability)
      name: (symbol
        name: (identifier))
      value: (arithmetic
        (negation
          operator: (negation_op)
          argument: (literal
            (number)))))))

==================
Int in an event parameter
==================

contract C {
  event ValueChanged(int indexed oldValue, int newValue);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    event: (event
      name: (symbol
        name: (identifier))
      parameters: (event_parameter_list
        (indexed_event_parameter
          type: (primitive_type
            (int_type))
          name: (symbol
            name: (identifier)))
        (unindexed_event_parameter
          type: (primitive_type
            (int_type))
          name: (symbol
            name: (identifier)))))))

==================
Int in an error parameter
==================

contract C {
  error InvalidValue(int provided, int expected);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    error: (error
      name: (symbol
        name: (identifier))
      parameters: (error_parameter_list
        (error_parameter
          type: (primitive_type
            (int_type))
          name: (symbol
            name: (identifier)))
        (error_parameter
          type: (primitive_type
            (int_type))
          name: (symbol
            name: (identifier)))))))

==================
Int as underlying type for UDVT
==================

type MyInt is int128;

---

(source_file
  definition: (udvt
    name: (identifier)
    underlying: (primitive_type
      (int_type))))
