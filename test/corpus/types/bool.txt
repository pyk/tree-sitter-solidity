==================
Bool as a state variable
==================

contract C {
  bool myVar;
  bool public myFlag = true;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (primitive_type
        (bool_type))
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (primitive_type
        (bool_type))
      visibility: (visibility)
      name: (symbol
        name: (identifier))
      value: (literal
        (boolean)))))

==================
Bool as a function parameter and return type
==================

contract C {
  function check(bool flag) public pure returns (bool) {
    return !flag;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (bool_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (bool_type))))
      body: (block
        (return_statement
          value: (not
            operator: (not_op)
            argument: (symbol
              name: (identifier))))))))

==================
Bool as a local variable
==================

contract C {
  function f() public pure {
    bool localCondition = false;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (visibility)
      mutability: (state_mutability)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (primitive_type
              (bool_type))
            name: (symbol
              name: (identifier)))
          value: (literal
            (boolean)))))))

==================
Bool in a struct definition
==================

contract C {
  struct Config {
    bool enabled;
    bool requiresAuth;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier))
      member: (struct_member
        type: (primitive_type
          (bool_type))
        name: (symbol
          name: (identifier)))
      member: (struct_member
        type: (primitive_type
          (bool_type))
        name: (symbol
          name: (identifier))))))

==================
Bool as a mapping value
==================

contract C {
  mapping(address => bool) public isRegistered;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (address_type))
        value: (primitive_type
          (bool_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Bool as an array base type
==================

contract C {
  bool[] public flags;
  bool[4] public fixedFlags;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (array_type
        base: (primitive_type
          (bool_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (array_type
        base: (primitive_type
          (bool_type))
        size: (literal
          (number)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Bool in a 'using for' directive
==================

library BoolUtils {}
using BoolUtils for bool;

---

(source_file
  definition: (library
    name: (symbol
      name: (identifier)))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (primitive_type
        (bool_type)))))

==================
Bool as a constant variable
==================

contract C {
  bool constant IS_ACTIVE = true;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (primitive_type
        (bool_type))
      mutability: (mutability)
      name: (symbol
        name: (identifier))
      value: (literal
        (boolean)))))

==================
Bool in an event parameter
==================

contract C {
  event StatusChanged(bool indexed isActive, bool completed);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (event
      name: (symbol
        name: (identifier))
      parameters: (event_parameter_list
        parameter: (event_parameter
          type: (primitive_type
            (bool_type))
          indexed: (indexed)
          name: (symbol
            name: (identifier)))
        parameter: (event_parameter
          type: (primitive_type
            (bool_type))
          name: (symbol
            name: (identifier)))))))

==================
Bool in an error parameter
==================

contract C {
  error StateMismatch(bool expected, bool actual);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (error
      name: (symbol
        name: (identifier))
      parameters: (error_parameter_list
        parameter: (error_parameter
          type: (primitive_type
            (bool_type))
          name: (symbol
            name: (identifier)))
        parameter: (error_parameter
          type: (primitive_type
            (bool_type))
          name: (symbol
            name: (identifier)))))))

==================
Bool as underlying type for UDVT
==================

type Flag is bool;

---

(source_file
  definition: (user_type
    name: (symbol
      name: (identifier))
    base: (primitive_type
      (bool_type))))

==================
Boolean literals in an expression
==================

contract C {
    function getStatus() public pure returns (bool) {
        return true && (false || true);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (bool_type))))
      body: (block
        (return_statement
          value: (and
            left: (literal
              (boolean))
            operator: (and_op)
            right: (group
              expression: (or
                left: (literal
                  (boolean))
                operator: (or_op)
                right: (literal
                  (boolean))))))))))
