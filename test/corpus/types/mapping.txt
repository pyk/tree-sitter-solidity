==================
Mapping as a state variable
==================

contract C {
  mapping(uint => address) myMapping;
  mapping(address => bool) public flags;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (uint_type))
        value: (primitive_type
          (address_type)))
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (address_type))
        value: (primitive_type
          (bool_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Nested mapping as a state variable
==================

contract C {
  mapping(address => mapping(uint => uint)) public nestedMapping;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (address_type))
        value: (mapping_type
          key: (primitive_type
            (uint_type))
          value: (primitive_type
            (uint_type))))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Mapping as a function parameter (storage pointer)
==================

contract C {
  mapping(bytes32 => uint) internal data;

  function process(mapping(bytes32 => uint) storage _data) internal {
    // ...
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (bytes_type))
        value: (primitive_type
          (uint_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (mapping_type
            key: (primitive_type
              (bytes_type))
            value: (primitive_type
              (uint_type)))
          location: (data_location)
          name: (identifier)))
      visibility: (visibility)
      body: (block
        (comment)))))

==================
Mapping as a function return type (storage pointer)
==================

contract C {
  mapping(address => uint) balances;

  function getBalances() internal view returns (mapping(address => uint) storage) {
    return balances;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (address_type))
        value: (primitive_type
          (uint_type)))
      name: (symbol
        name: (identifier)))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameters
        parameter: (parameter
          type: (mapping_type
            key: (primitive_type
              (address_type))
            value: (primitive_type
              (uint_type)))
          location: (data_location)))
      body: (block
        (return_statement
          value: (symbol
            name: (identifier)))))))

==================
Mapping as a local variable (storage pointer)
==================

contract C {
  mapping(uint => address) userAddresses;

  function f() public {
    mapping(uint => address) storage localMap = userAddresses;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (uint_type))
        value: (primitive_type
          (address_type)))
      name: (symbol
        name: (identifier)))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (visibility)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (mapping_type
              key: (primitive_type
                (uint_type))
              value: (primitive_type
                (address_type)))
            location: (data_location)
            name: (symbol
              name: (identifier)))
          value: (symbol
            name: (identifier)))))))

==================
Mapping inside a struct definition
==================

contract C {
  struct UserData {
    mapping(uint => bool) permissions;
    uint lastLogin;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier))
      member: (struct_member
        type: (mapping_type
          key: (primitive_type
            (uint_type))
          value: (primitive_type
            (bool_type)))
        name: (symbol
          name: (identifier)))
      member: (struct_member
        type: (primitive_type
          (uint_type))
        name: (symbol
          name: (identifier))))))

==================
Mapping with a custom type as key or value
==================

contract C {
  enum Status { Active, Inactive }
  struct Data {}

  mapping(Status => Data) public statusData;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (enum
      name: (symbol
        name: (identifier))
      value: (symbol
        name: (identifier))
      value: (symbol
        name: (identifier)))
    definition: (struct
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (mapping_type
        key: (custom_type
          symbol: (symbol
            name: (identifier)))
        value: (custom_type
          symbol: (symbol
            name: (identifier))))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Mapping value is an array
==================

contract C {
    mapping(address => uint[]) public userHistories;
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (address_type))
        value: (array_type
          base: (primitive_type
            (uint_type))))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Mapping value is a struct
==================

contract C {
    struct User { bool active; }
    mapping(uint => User) public users;
}
---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier))
      member: (struct_member
        type: (primitive_type
          (bool_type))
        name: (symbol
          name: (identifier))))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (uint_type))
        value: (custom_type
          symbol: (symbol
            name: (identifier))))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))
