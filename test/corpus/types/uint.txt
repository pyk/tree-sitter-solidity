==================
Uint as a state variable
==================

contract C {
  uint myVar;
  uint8 myVar8;
  uint256 myVar256;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (primitive_type
        (uint_type))
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (primitive_type
        (uint_type))
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (primitive_type
        (uint_type))
      name: (symbol
        name: (identifier)))))

==================
Uint as a function parameter and return type
==================

contract C {
  function process(uint8 input) public pure returns (uint result) {
    return uint(input);
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      visibility: (visibility)
      mutability: (function_mutability)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier))))
      body: (block
        (return_statement
          value: (cast
            type: (primitive_type
              (uint_type))
            argument: (symbol
              name: (identifier))))))))

==================
Uint as a local variable
==================

contract C {
  function f() public pure {
    uint256 localCounter = 42;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (visibility)
      mutability: (function_mutability)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (primitive_type
              (uint_type))
            name: (symbol
              name: (identifier)))
          value: (literal
            (number)))))))

==================
Uint in a type cast
==================

contract C {
  function f(bytes1 b) public pure returns (uint8) {
    return uint8(b);
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (primitive_type
            (bytes_type))
          name: (symbol
            name: (identifier))))
      visibility: (visibility)
      mutability: (function_mutability)
      returns: (parameters
        parameter: (parameter
          type: (primitive_type
            (uint_type))))
      body: (block
        (return_statement
          value: (cast
            type: (primitive_type
              (uint_type))
            argument: (symbol
              name: (identifier))))))))

==================
Uint in a struct definition
==================

contract C {
  struct MyStruct {
    uint24 id;
    uint amount;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier))
      member: (struct_member
        type: (primitive_type
          (uint_type))
        name: (symbol
          name: (identifier)))
      member: (struct_member
        type: (primitive_type
          (uint_type))
        name: (symbol
          name: (identifier))))))

==================
Uint in a mapping definition
==================

contract C {
  mapping(uint => uint256) balances;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (mapping_type
        key: (primitive_type
          (uint_type))
        value: (primitive_type
          (uint_type)))
      name: (symbol
        name: (identifier)))))

==================
Uint as an array base type
==================

contract C {
  uint[] public numbers;
  uint[5] public fixedNumbers;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (array_type
        base: (primitive_type
          (uint_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))
    definition: (variable
      type: (array_type
        base: (primitive_type
          (uint_type))
        size: (literal
          (number)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Uint in a 'using for' directive
==================

using SafeMath for uint256;

---

(source_file
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (primitive_type
        (uint_type)))))

==================
Uint in a constant variable
==================

contract C {
  uint constant MY_CONST = 100;
  uint128 public immutable MY_IMMUTABLE = 200;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (variable
      type: (primitive_type
        (uint_type))
      mutability: (constant)
      name: (symbol
        name: (identifier))
      value: (literal
        (number)))
    definition: (variable
      type: (primitive_type
        (uint_type))
      visibility: (visibility)
      mutability: (immutable)
      name: (symbol
        name: (identifier))
      value: (literal
        (number)))))

==================
Uint in an event parameter
==================

contract C {
  event ValueChanged(uint indexed oldValue, uint newValue);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (event
      name: (symbol
        name: (identifier))
      parameters: (event_parameters
        parameter: (event_parameter
          type: (primitive_type
            (uint_type))
          indexed: (indexed)
          name: (symbol
            name: (identifier)))
        parameter: (event_parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))))))

==================
Uint in an error parameter
==================

contract C {
  error InsufficientFunds(uint required, uint available);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (error
      name: (symbol
        name: (identifier))
      parameters: (error_parameters
        parameter: (error_parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))
        parameter: (error_parameter
          type: (primitive_type
            (uint_type))
          name: (symbol
            name: (identifier)))))))

==================
Uint as underlying type for UDVT
==================

type MyUint is uint128;

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (primitive_type
      (uint_type))))
