==================
Fixed-point as a state variable
==================

contract C {
  fixed myFixed;
  ufixed myUFixed;
  fixed128x18 myFixedExplicit;
  ufixed256x80 myUFixedExplicit;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (primitive_type
        (fixed_type))
      name: (symbol
        name: (identifier)))
    variable: (variable
      type: (primitive_type
        (ufixed_type))
      name: (symbol
        name: (identifier)))
    variable: (variable
      type: (primitive_type
        (fixed_type))
      name: (symbol
        name: (identifier)))
    variable: (variable
      type: (primitive_type
        (ufixed_type))
      name: (symbol
        name: (identifier)))))

==================
Fixed-point as a function parameter and return type
==================

contract C {
  function process(fixed128x18 input) public pure returns (ufixed) {
    // ...
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (fixed_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (ufixed_type))))
      body: (block
        (comment)))))

==================
Fixed-point as a local variable
==================

contract C {
  function f() public pure {
    fixed localPrice;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      visibility: (visibility)
      mutability: (state_mutability)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (primitive_type
              (fixed_type))
            name: (symbol
              name: (identifier))))))))

==================
Fixed-point in a type cast
==================

contract C {
  function f(int i) public pure returns (fixed) {
    return fixed(i);
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (int_type))
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (fixed_type))))
      body: (block
        (return_statement
          value: (cast
            type: (primitive_type
              (fixed_type))
            argument: (primary_expression
              (identifier))))))))

==================
Fixed-point in a struct definition
==================

contract C {
  struct PricePoint {
    fixed price;
    ufixed volatility;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    struct: (struct
      name: (symbol
        name: (identifier))
      (struct_member
        type: (primitive_type
          (fixed_type))
        name: (symbol
          name: (identifier)))
      (struct_member
        type: (primitive_type
          (ufixed_type))
        name: (symbol
          name: (identifier))))))

==================
Fixed-point as a mapping value
==================

contract C {
  mapping(uint => fixed) public priceFeed;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (mapping_type
        key: (primitive_type
          (uint_type))
        value: (primitive_type
          (fixed_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Fixed-point as an array base type
==================

contract C {
  ufixed[] public rates;
  fixed64x10[4] public history;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (array_type
        base: (primitive_type
          (ufixed_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))
    variable: (variable
      type: (array_type
        base: (primitive_type
          (fixed_type))
        size: (literal
          (number)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
Fixed-point in a 'using for' directive
==================

library FixedMath {}
using FixedMath for fixed;
using FixedMath for ufixed256x18;

---

(source_file
  definition: (library
    name: (symbol
      name: (identifier)))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (primitive_type
        (fixed_type))))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (primitive_type
        (ufixed_type)))))

==================
Fixed-point in an event parameter
==================

contract C {
  event PriceUpdated(fixed newPrice);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    event: (event
      name: (symbol
        name: (identifier))
      parameters: (event_parameter_list
        (unindexed_event_parameter
          type: (primitive_type
            (fixed_type))
          name: (symbol
            name: (identifier)))))))

==================
Fixed-point in an error parameter
==================

contract C {
  error InvalidPrice(ufixed price);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    error: (error
      name: (symbol
        name: (identifier))
      parameters: (error_parameter_list
        (error_parameter
          type: (primitive_type
            (ufixed_type))
          name: (symbol
            name: (identifier)))))))

==================
Fixed-point as underlying type for UDVT
==================

type Price is fixed128x18;

---

(source_file
  definition: (udvt
    name: (identifier)
    underlying: (primitive_type
      (fixed_type))))
