==================
String as a state variable
==================

contract C {
  string myVar;
  string public myPublicString = "initial";
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (primitive_type
        (string_type))
      name: (symbol
        name: (identifier)))
    variable: (variable
      type: (primitive_type
        (string_type))
      visibility: (visibility)
      name: (symbol
        name: (identifier))
      value: (literal
        (string)))))

==================
String as a function parameter and return type
==================

contract C {
  function process(string calldata input) public pure returns (string memory) {
    return input;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (string_type))
          location: (data_location)
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (string_type))
          location: (data_location)))
      body: (block
        (return_statement
          value: (primary_expression
            (identifier)))))))

==================
String as a local variable
==================

contract C {
  function f() public pure {
    string memory localString = "Hello, Local!";
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      visibility: (visibility)
      mutability: (state_mutability)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (primitive_type
              (string_type))
            location: (data_location)
            name: (symbol
              name: (identifier)))
          value: (literal
            (string)))))))

==================
String in a type cast
==================

contract C {
  function f(bytes memory b) public pure returns (string memory) {
    return string(b);
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      parameters: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (bytes_type))
          location: (data_location)
          name: (identifier)))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (string_type))
          location: (data_location)))
      body: (block
        (return_statement
          value: (cast
            type: (primitive_type
              (string_type))
            argument: (primary_expression
              (identifier))))))))

==================
String in a struct definition
==================

contract C {
  struct MyStruct {
    string name;
    string description;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    struct: (struct
      name: (symbol
        name: (identifier))
      (struct_member
        type: (primitive_type
          (string_type))
        name: (symbol
          name: (identifier)))
      (struct_member
        type: (primitive_type
          (string_type))
        name: (symbol
          name: (identifier))))))

==================
String in a mapping value
==================

contract C {
  mapping(uint => string) public names;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (mapping_type
        key: (primitive_type
          (uint_type))
        value: (primitive_type
          (string_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
String as an array base type
==================

contract C {
  string[] public messages;
  string[2] public fixedMessages;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (array_type
        base: (primitive_type
          (string_type)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))
    variable: (variable
      type: (array_type
        base: (primitive_type
          (string_type))
        size: (literal
          (number)))
      visibility: (visibility)
      name: (symbol
        name: (identifier)))))

==================
String in a 'using for' directive
==================

library StringUtils {}
using StringUtils for string;

---

(source_file
  definition: (library
    name: (symbol
      name: (identifier)))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (primitive_type
        (string_type)))))

==================
String as a constant variable
==================

contract C {
  string constant GREETING = "Hello Solidity";
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    variable: (variable
      type: (primitive_type
        (string_type))
      mutability: (mutability)
      name: (symbol
        name: (identifier))
      value: (literal
        (string)))))

==================
String in an event parameter
==================

contract C {
  event Log(string indexed message, string data);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    event: (event
      name: (symbol
        name: (identifier))
      parameters: (event_parameter_list
        (indexed_event_parameter
          type: (primitive_type
            (string_type))
          name: (symbol
            name: (identifier)))
        (unindexed_event_parameter
          type: (primitive_type
            (string_type))
          name: (symbol
            name: (identifier)))))))

==================
String in an error parameter
==================

contract C {
  error MyError(string reason);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    error: (error
      name: (symbol
        name: (identifier))
      parameters: (error_parameter_list
        (error_parameter
          type: (primitive_type
            (string_type))
          name: (symbol
            name: (identifier)))))))

==================
String literal in an expression
==================

contract C {
    function getMessage() public pure returns (string memory) {
        return "This is a message.";
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    function: (function
      name: (symbol
        name: (identifier))
      visibility: (visibility)
      mutability: (state_mutability)
      returns: (parameter_list
        parameter: (parameter
          type: (primitive_type
            (string_type))
          location: (data_location)))
      body: (block
        (return_statement
          value: (literal
            (string)))))))
