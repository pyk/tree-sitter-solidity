==================
Custom type as a state variable
==================

struct MyStruct {}
contract OtherContract {}

contract C {
  MyStruct myStruct;
  OtherContract myContract;
}

---

(source_file
  definition: (struct
    name: (symbol
      name: (identifier)))
  definition: (contract
    name: (symbol
      name: (identifier)))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (state_variable
      type: (custom_type
        symbol: (symbol
          name: (identifier)))
      name: (symbol
        name: (identifier)))
    definition: (state_variable
      type: (custom_type
        symbol: (symbol
          name: (identifier)))
      name: (symbol
        name: (identifier)))))

==================
Qualified custom type (from import)
==================

import "./MyLib.sol";

contract C {
  MyLib.Data myData;
}

---

(source_file
  directive: (import
    (file_import
      path: (string)))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (state_variable
      type: (custom_type
        symbol: (symbol
          scope: (symbol
            name: (identifier))
          name: (identifier)))
      name: (symbol
        name: (identifier)))))

==================
Custom type as a function parameter and return type
==================

interface IMyInterface {}

contract C {
  function process(IMyInterface iface) public pure returns (IMyInterface) {
    return iface;
  }
}

---

(source_file
  definition: (interface
    name: (symbol
      name: (identifier)))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (custom_type
            symbol: (symbol
              name: (identifier)))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (custom_type
            symbol: (symbol
              name: (identifier)))))
      body: (block
        statement: (return
          value: (symbol
            name: (identifier)))))))

==================
Custom type as a local variable
==================

contract C {
  struct Data {}
  function f() public {
    Data memory localData;
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier)))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      body: (block
        statement: (local_variable
          type: (custom_type
            symbol: (symbol
              name: (identifier)))
          location: (memory)
          name: (symbol
            name: (identifier)))))))

==================
Custom type in a type cast
==================

contract Other {}
contract C {
  function f(address a) public pure returns (Other) {
    return Other(a);
  }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier)))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (address_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (custom_type
            symbol: (symbol
              name: (identifier)))))
      body: (block
        statement: (return
          value: (call
            function: (symbol
              name: (identifier))
            arguments: (arguments
              argument: (symbol
                name: (identifier)))))))))

==================
Custom type in a mapping key and value
==================

contract C {
  enum Status { PENDING, ACTIVE }
  struct UserProfile {}
  mapping(Status => UserProfile) public profiles;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (enum
      name: (symbol
        name: (identifier))
      value: (symbol
        name: (identifier))
      value: (symbol
        name: (identifier)))
    definition: (struct
      name: (symbol
        name: (identifier)))
    definition: (state_variable
      type: (mapping_type
        key: (custom_type
          symbol: (symbol
            name: (identifier)))
        value: (custom_type
          symbol: (symbol
            name: (identifier))))
      visibility: (public)
      name: (symbol
        name: (identifier)))))

==================
Custom type as an array base
==================

contract C {
  struct Point {}
  Point[] public path;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier)))
    definition: (state_variable
      type: (array_type
        base: (custom_type
          symbol: (symbol
            name: (identifier))))
      visibility: (public)
      name: (symbol
        name: (identifier)))))

==================
Custom type in a 'using for' directive
==================

library MyLib {}
struct MyData {}

using MyLib for MyData;

---

(source_file
  definition: (library
    name: (symbol
      name: (identifier)))
  definition: (struct
    name: (symbol
      name: (identifier)))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (custom_type
        symbol: (symbol
          name: (identifier))))))

==================
Custom type in an event or error parameter
==================

contract C {
    struct EventData {}
    error CustomError(EventData data);
    event CustomEvent(EventData indexed data);
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (struct
      name: (symbol
        name: (identifier)))
    definition: (error
      name: (symbol
        name: (identifier))
      parameters: (error_parameters
        parameter: (error_parameter
          type: (custom_type
            symbol: (symbol
              name: (identifier)))
          name: (symbol
            name: (identifier)))))
    definition: (event
      name: (symbol
        name: (identifier))
      parameters: (event_parameters
        parameter: (event_parameter
          type: (custom_type
            symbol: (symbol
              name: (identifier)))
          indexed: (indexed)
          name: (symbol
            name: (identifier)))))))

==================
Custom type in a `new` expression
==================

contract MyToken {}

contract Factory {
    function create() public {
        MyToken token = new MyToken();
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier)))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      body: (block
        statement: (local_variable
          type: (custom_type
            symbol: (symbol
              name: (identifier)))
          name: (symbol
            name: (identifier))
          value: (call
            function: (new_expression
              type: (custom_type
                symbol: (symbol
                  name: (identifier))))
            arguments: (arguments)))))))
