==================
Operator precedence
==================
contract C {
  function f() {
    uint a = 1 + 2 * 3;
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      (function_definition
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier))
            value: (additive_expression
              left: (primary_expression
                (literal
                  (number_literal)))
              operator: (additive_operator)
              right: (multiplicative_expression
                left: (primary_expression
                  (literal
                    (number_literal)))
                operator: (multiplicative_operator)
                right: (primary_expression
                  (literal
                    (number_literal)))))))))))

==================
Unary expressions
==================

contract C {
  function f(uint a) {
    bool b = !true;
    uint c = -a;
    uint d = ++a;
    uint e = a--;
    delete a;
  }
}

---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      (function_definition
        name: (identifier)
        parameters: (parameter_list
          (parameter_declaration
            type: (uint_type)
            name: (identifier)))
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (bool_type)
              name: (identifier))
            value: (unary_expression
              argument: (primary_expression
                (literal
                  (boolean_literal)))))
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier))
            value: (unary_expression
              argument: (primary_expression
                (identifier))))
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier))
            value: (unary_expression
              argument: (primary_expression
                (identifier))))
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier))
            value: (unary_expression
              argument: (primary_expression
                (identifier))))
          (expression_statement
            (unary_expression
              argument: (primary_expression
                (identifier)))))))))

==================
Conditional expression
==================
contract C {
  function f(bool a) {
    uint b = a ? 1 : 2;
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      (function_definition
        name: (identifier)
        parameters: (parameter_list
          (parameter_declaration
            type: (bool_type)
            name: (identifier)))
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier))
            value: (conditional_expression
              condition: (primary_expression
                (identifier))
              consequence: (primary_expression
                (literal
                  (number_literal)))
              alternative: (primary_expression
                (literal
                  (number_literal))))))))))

==================
Nested conditional expression
==================
contract C {
  function f(bool a, bool c) {
    uint b = a ? 1 : c ? 2 : 3;
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      (function_definition
        name: (identifier)
        parameters: (parameter_list
          (parameter_declaration
            type: (bool_type)
            name: (identifier))
          (parameter_declaration
            type: (bool_type)
            name: (identifier)))
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier))
            value: (conditional_expression
              condition: (primary_expression
                (identifier))
              consequence: (primary_expression
                (literal
                  (number_literal)))
              alternative: (conditional_expression
                condition: (primary_expression
                  (identifier))
                consequence: (primary_expression
                  (literal
                    (number_literal)))
                alternative: (primary_expression
                  (literal
                    (number_literal)))))))))))

==================
Comprehensive member access expressions
==================
contract C {
  function f() {
    address sender = msg.sender;
    uint chain = block.chainid.something;
    address owner = getContract().owner;
    address addr = myPayable.address;
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      (function_definition
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (address_type)
              name: (identifier))
            value: (member_access_expression
              object: (primary_expression
                (identifier))
              member: (identifier)))
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier))
            value: (member_access_expression
              object: (member_access_expression
                object: (primary_expression
                  (identifier))
                member: (identifier))
              member: (identifier)))
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (address_type)
              name: (identifier))
            value: (member_access_expression
              object: (call_expression
                function: (primary_expression
                  (identifier))
                arguments: (call_argument_list))
              member: (identifier)))
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (address_type)
              name: (identifier))
            value: (member_access_expression
              object: (primary_expression
                (identifier))
              member: (identifier))))))))

==================
Index access expression
==================
contract C {
  function f(uint[] memory arr) {
    uint val = arr[0];
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      (function_definition
        name: (identifier)
        parameters: (parameter_list
          (parameter_declaration
            type: (array_type
              base: (uint_type))
            location: (data_location)
            name: (identifier)))
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier))
            value: (index_access_expression
              base: (primary_expression
                (identifier))
              index: (primary_expression
                (literal
                  (number_literal))))))))))

==================
New expression
==================
contract C {
  function f() {
    OtherContract o = new OtherContract();
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      (function_definition
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (user_defined_type
                (identifier_path
                  (identifier)))
              name: (identifier))
            value: (call_expression
              function: (new_expression
                type: (user_defined_type
                  (identifier_path
                    (identifier))))
              arguments: (call_argument_list))))))))
