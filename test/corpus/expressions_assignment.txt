==================
Simple assignment
==================

contract C {
  function f() {
    uint a;
    a = 1;
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      function: (function_definition
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier)))
          (expression_statement
            (assignment_expression
              left: (primary_expression
                (identifier))
              operator: (simple_assignment_operator)
              right: (primary_expression
                (literal
                  (number_literal))))))))))

==================
Compound additive assignment
==================

contract C {
  function f() {
    uint a;
    a += 1;
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      function: (function_definition
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier)))
          (expression_statement
            (assignment_expression
              left: (primary_expression
                (identifier))
              operator: (compound_assignment_operator)
              right: (primary_expression
                (literal
                  (number_literal))))))))))

==================
Compound multiplicative assignment
==================

contract C {
  function f() {
    uint a;
    a *= 2;
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      function: (function_definition
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier)))
          (expression_statement
            (assignment_expression
              left: (primary_expression
                (identifier))
              operator: (compound_assignment_operator)
              right: (primary_expression
                (literal
                  (number_literal))))))))))

==================
Compound bitwise assignment
==================

contract C {
  function f() {
    uint a;
    a &= 0xFF;
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      function: (function_definition
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier)))
          (expression_statement
            (assignment_expression
              left: (primary_expression
                (identifier))
              operator: (compound_assignment_operator)
              right: (primary_expression
                (literal
                  (hex_literal))))))))))

==================
Compound shift assignment
==================

contract C {
  function f() {
    uint a;
    a <<= 2;
  }
}
---

(source_file
  (contract_definition
    name: (identifier)
    body: (contract_body
      function: (function_definition
        name: (identifier)
        parameters: (parameter_list)
        body: (block
          (variable_declaration_statement
            declaration: (variable_declaration
              type: (uint_type)
              name: (identifier)))
          (expression_statement
            (assignment_expression
              left: (primary_expression
                (identifier))
              operator: (compound_assignment_operator)
              right: (primary_expression
                (literal
                  (number_literal))))))))))
