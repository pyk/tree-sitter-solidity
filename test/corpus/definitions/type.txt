==================
User-defined value type declaration
==================

type MyUint is uint256;

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (uint_type)))

==================
UDVT as a state variable
==================

type MyAddress is address;

contract C {
    MyAddress owner;
}

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (address_type))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (state_variable
      type: (custom_type
        symbol: (symbol
          name: (identifier)))
      name: (symbol
        name: (identifier)))))

==================
UDVT as a function parameter and return type
==================

type Id is uint;

contract C {
    function processId(Id _id) public pure returns (Id) {
        return _id;
    }
}

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (uint_type))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (custom_type
            symbol: (symbol
              name: (identifier)))
          name: (symbol
            name: (identifier))))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (custom_type
            symbol: (symbol
              name: (identifier)))))
      body: (block
        statement: (return
          value: (symbol
            name: (identifier)))))))

==================
UDVT as a local variable
==================

type MyFlag is bool;

contract C {
    function f() public pure {
        MyFlag a = MyFlag.wrap(true);
    }
}

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (bool_type))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (local_variable
          type: (custom_type
            symbol: (symbol
              name: (identifier)))
          name: (symbol
            name: (identifier))
          value: (call
            function: (symbol
              scope: (symbol
                name: (identifier))
              name: (identifier))
            arguments: (arguments
              argument: (literal
                (boolean)))))))))

==================
UDVT as a struct member
==================

type Timestamp is uint64;

struct Event {
    Timestamp time;
}

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (uint_type))
  definition: (struct
    name: (symbol
      name: (identifier))
    member: (struct_member
      type: (custom_type
        symbol: (symbol
          name: (identifier)))
      name: (symbol
        name: (identifier)))))

==================
UDVT as a mapping key and value
==================

type UserId is uint;
type Balance is uint;

contract Ledger {
    mapping(UserId => Balance) public balances;
}

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (uint_type))
  definition: (type
    name: (symbol
      name: (identifier))
    base: (uint_type))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (state_variable
      type: (mapping_type
        key: (custom_type
          symbol: (symbol
            name: (identifier)))
        value: (custom_type
          symbol: (symbol
            name: (identifier))))
      visibility: (public)
      name: (symbol
        name: (identifier)))))

==================
UDVT as an array base type
==================

type Price is ufixed128x18;

contract Oracle {
    Price[] public priceHistory;
}

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (ufixed_type))
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (state_variable
      type: (array_type
        base: (custom_type
          symbol: (symbol
            name: (identifier))))
      visibility: (public)
      name: (symbol
        name: (identifier)))))

==================
UDVT in a 'using for' directive
==================

library SafeMath {}
type SafeUint is uint256;

using SafeMath for SafeUint;

---

(source_file
  definition: (library
    name: (symbol
      name: (identifier)))
  definition: (type
    name: (symbol
      name: (identifier))
    base: (uint_type))
  directive: (using
    (using_library
      library: (symbol
        name: (identifier))
      target: (custom_type
        symbol: (symbol
          name: (identifier))))))

==================
UDVT in an event parameter
==================

type ItemId is uint;

event ItemPurchased(ItemId indexed id, address buyer);

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (uint_type))
  definition: (event
    name: (symbol
      name: (identifier))
    parameters: (event_parameters
      parameter: (event_parameter
        type: (custom_type
          symbol: (symbol
            name: (identifier)))
        indexed: (indexed)
        name: (symbol
          name: (identifier)))
      parameter: (event_parameter
        type: (address_type)
        name: (symbol
          name: (identifier))))))

==================
UDVT in an error parameter
==================

type ErrorCode is uint8;

error CustomError(ErrorCode code, string message);

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (uint_type))
  definition: (error
    name: (symbol
      name: (identifier))
    parameters: (error_parameters
      parameter: (error_parameter
        type: (custom_type
          symbol: (symbol
            name: (identifier)))
        name: (symbol
          name: (identifier)))
      parameter: (error_parameter
        type: (string_type)
        name: (symbol
          name: (identifier))))))

==================
UDVT in a type cast expression
==================

type MyUint is uint;

function f() pure returns (MyUint) {
    return MyUint(42);
}

---

(source_file
  definition: (type
    name: (symbol
      name: (identifier))
    base: (uint_type))
  definition: (function
    name: (symbol
      name: (identifier))
    mutability: (pure)
    returns: (parameters
      parameter: (parameter
        type: (custom_type
          symbol: (symbol
            name: (identifier)))))
    body: (block
      statement: (return
        value: (call
          function: (symbol
            name: (identifier))
          arguments: (arguments
            argument: (literal
              (number))))))))
