==================
Empty function body
==================

contract C {
    function emptyBody() public {}
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      body: (block))))

==================
Function body with an expression statement
==================

contract C {
    function callAnother() public {
        anotherFunction();
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      body: (block
        statement: (call
          function: (symbol
            name: (identifier))
          arguments: (arguments))))))

==================
Function body with a variable declaration statement
==================

contract C {
    function declareVar() public pure {
        uint256 myVar = 42;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (local_variable
          type: (uint_type)
          name: (symbol
            name: (identifier))
          value: (literal
            (number)))))))

==================
Function body with an if-else statement
==================

contract C {
    function check(bool cond) public {
        if (cond) {
            // true
        } else {
            // false
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (bool_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        statement: (if_statement
          condition: (symbol
            name: (identifier))
          consequence: (block
            (comment))
          alternative: (block
            (comment)))))))

==================
Function body with a for loop
==================

contract C {
    function loop() public {
        for (uint i = 0; i < 10; i++) {
            // body
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      body: (block
        statement: (for_statement
          initializer: (local_variable
            type: (uint_type)
            name: (symbol
              name: (identifier))
            value: (literal
              (number)))
          condition: (comparison
            left: (symbol
              name: (identifier))
            operator: (lt)
            right: (literal
              (number)))
          update: (arithmetic
            (increment
              argument: (symbol
                name: (identifier))
              operator: (increment_op)))
          body: (block
            (comment)))))))

==================
Function body with while and do-while loops
==================

contract C {
    function loops(uint x) public {
        while (x > 0) { x--; }
        do { x++; } while (x < 10);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      parameters: (parameters
        parameter: (parameter
          type: (uint_type)
          name: (symbol
            name: (identifier))))
      visibility: (public)
      body: (block
        statement: (while_statement
          condition: (comparison
            left: (symbol
              name: (identifier))
            operator: (gt)
            right: (literal
              (number)))
          body: (block
            statement: (arithmetic
              (decrement
                argument: (symbol
                  name: (identifier))
                operator: (decrement_op)))))
        statement: (do_while_statement
          body: (block
            statement: (arithmetic
              (increment
                argument: (symbol
                  name: (identifier))
                operator: (increment_op))))
          condition: (comparison
            left: (symbol
              name: (identifier))
            operator: (lt)
            right: (literal
              (number))))))))

==================
Function body with break and continue
==================

contract C {
    function loopControl() public {
        for (;;) {
            break;
            continue;
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      body: (block
        statement: (for_statement
          body: (block
            statement: (break)
            statement: (continue)))))))

==================
Function body with return statements
==================

contract C {
    function withReturn() public pure returns (uint) {
        return 42;
    }
    function earlyReturn() public {
        return;
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (pure)
      returns: (parameters
        parameter: (parameter
          type: (uint_type)))
      body: (block
        statement: (return
          value: (literal
            (number)))))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      body: (block
        statement: (return)))))

==================
Function body with emit statement
==================

contract C {
    event MyEvent(uint);
    function triggerEvent() public {
        emit MyEvent(123);
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (event
      name: (symbol
        name: (identifier))
      parameters: (event_parameters
        parameter: (event_parameter
          type: (uint_type))))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      body: (block
        statement: (emit
          event: (symbol
            name: (identifier))
          arguments: (arguments
            argument: (literal
              (number))))))))

==================
Function body with revert statement
==================

contract C {
    error MyError();
    function alwaysRevert() public pure {
        revert MyError();
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (error
      name: (symbol
        name: (identifier)))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (revert
          error: (custom_error
            name: (symbol
              name: (identifier))
            arguments: (arguments)))))))

==================
Function body with unchecked block
==================

contract C {
    function uncheckedMath() public pure {
        unchecked {
            uint x = 0;
            x--;
        }
    }
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    definition: (function
      name: (symbol
        name: (identifier))
      visibility: (public)
      mutability: (pure)
      body: (block
        statement: (unchecked
          body: (block
            statement: (local_variable
              type: (uint_type)
              name: (symbol
                name: (identifier))
              value: (literal
                (number)))
            statement: (arithmetic
              (decrement
                argument: (symbol
                  name: (identifier))
                operator: (decrement_op)))))))))
