==================
Top-level constant (uint)
==================

uint256 constant MY_CONSTANT = 42;

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (uint_type)))
    name: (symbol
      name: (identifier))
    value: (literal
      (number))))

==================
Top-level constant (negative int)
==================

int256 constant MY_NEGATIVE_CONSTANT = -100;

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (int_type)))
    name: (symbol
      name: (identifier))
    value: (unary_expression
      argument: (literal
        (number)))))

==================
Top-level constant (string)
==================

string constant GREETING = "Hello, World!";

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (string_type)))
    name: (symbol
      name: (identifier))
    value: (literal
      (string))))

==================
Top-level constant (address)
==================

address constant OWNER = 0xdCad3a6d3569DF655070DEd06cb7A1b2Ccd1D3AF;

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (address_type)))
    name: (symbol
      name: (identifier))
    value: (literal
      (hex))))

==================
Top-level constant (bool with unary operator)
==================

bool constant IS_NOT_ENABLED = !true;

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (bool_type)))
    name: (symbol
      name: (identifier))
    value: (unary_expression
      argument: (literal
        (boolean)))))

==================
Top-level constant (bytes)
==================

bytes32 constant MY_HASH = 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef;

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (bytes_type)))
    name: (symbol
      name: (identifier))
    value: (literal
      (hex))))

==================
Constant with a parenthesized expression
==================

uint constant WITH_PARENS = (1 + 2);

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (uint_type)))
    name: (symbol
      name: (identifier))
    value: (tuple_expression
      (arithmetic
        (add_expression
          left: (literal
            (number))
          operator: (add_op)
          right: (literal
            (number)))))))

==================
Constant with parentheses to override precedence
==================

uint constant SECONDS_PER_DAY = (60 + 60) * 12;

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (uint_type)))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (mul_expression
        left: (tuple_expression
          (arithmetic
            (add_expression
              left: (literal
                (number))
              operator: (add_op)
              right: (literal
                (number)))))
        operator: (mul_op)
        right: (literal
          (number))))))

==================
Constant with exponentiation
==================

uint constant ONE_ETHER = 10 ** 18;

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (uint_type)))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (exp_expression
        left: (literal
          (number))
        operator: (exp_op)
        right: (literal
          (number))))))

==================
Constant with built-in function call
==================

bytes32 constant EMPTY_STRING_HASH = keccak256("");

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (bytes_type)))
    name: (symbol
      name: (identifier))
    value: (call_expression
      function: (primary_expression
        (identifier))
      arguments: (argument_list
        argument: (literal
          (string))))))

==================
Constant with type casting
==================

address constant ZERO_ADDRESS = address(0);

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (address_type)))
    name: (symbol
      name: (identifier))
    value: (cast
      type: (type
        (primitive_type
          (address_type)))
      arguments: (argument_list
        argument: (literal
          (number))))))

==================
Constant inside a contract
==================

contract MyContract {
    uint public constant VERSION = 1;
}

---

(source_file
  definition: (contract
    name: (symbol
      name: (identifier))
    storage: (storage
      type: (type
        (primitive_type
          (uint_type)))
      visibility: (visibility)
      mutability: (mutability)
      name: (symbol
        name: (identifier))
      value: (literal
        (number)))))

==================
Constant referring to another constant
==================

uint constant A = 1;
uint constant B = A * 2;

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (uint_type)))
    name: (symbol
      name: (identifier))
    value: (literal
      (number)))
  definition: (constant
    type: (type
      (primitive_type
        (uint_type)))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (mul_expression
        left: (primary_expression
          (identifier))
        operator: (mul_op)
        right: (literal
          (number))))))

==================
Constant inside a Library
==================

library Math {
    uint256 public constant PI = 31415926535;
}

---

(source_file
  definition: (library
    name: (symbol
      name: (identifier))
    storage: (storage
      type: (type
        (primitive_type
          (uint_type)))
      visibility: (visibility)
      mutability: (mutability)
      name: (symbol
        name: (identifier))
      value: (literal
        (number)))))

==================
Constant with bitwise not
==================

uint constant BITWISE_NOT = ~uint(0);

---

(source_file
  definition: (constant
    type: (type
      (primitive_type
        (uint_type)))
    name: (symbol
      name: (identifier))
    value: (arithmetic
      (bitnot_expression
        operator: (bitnot_op)
        argument: (cast
          type: (type
            (primitive_type
              (uint_type)))
          arguments: (argument_list
            argument: (literal
              (number))))))))
