==================
Revert with a simple error
==================

contract C {
  error Unauthorized();
  function f() {
    revert Unauthorized();
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    error: (error
      name: (identifier))
    function: (function
      name: (identifier)
      body: (block
        (revert_statement
          error: (identifier_path
            (identifier))
          arguments: (call_argument_list))))))

==================
Revert with an error that has arguments
==================

contract C {
  error InsufficientBalance(uint requested, uint available);
  function f(uint amount) {
    revert InsufficientBalance(amount, 100);
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    error: (error
      name: (identifier)
      parameters: (error_parameter_list
        (error_parameter
          type: (uint_type)
          name: (identifier))
        (error_parameter
          type: (uint_type)
          name: (identifier))))
    function: (function
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (uint_type)
          name: (identifier)))
      body: (block
        (revert_statement
          error: (identifier_path
            (identifier))
          arguments: (call_argument_list
            (primary_expression
              (identifier))
            (primary_expression
              (literal
                (number_literal)))))))))

==================
Revert with a namespaced error
==================
import "./Errors.sol";

contract C {
  function f(uint amount) {
    revert Errors.NotAllowed(amount);
  }
}

---

(source_file
  directive: (import
    path: (string_literal))
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (uint_type)
          name: (identifier)))
      body: (block
        (revert_statement
          error: (identifier_path
            (identifier)
            (identifier))
          arguments: (call_argument_list
            (primary_expression
              (identifier))))))))
