==================
Full for loop
==================

contract C {
  function f() {
    for (uint i = 0; i < 10; i++) {
      // do something
    }
  }
}
---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (for_statement
          initializer: (variable_declaration_statement
            declaration: (variable_declaration
              type: (user_defined_type
                name: (symbol
                  name: (identifier)))
              name: (identifier))
            value: (literal
              (number)))
          condition: (comparison_expression
            left: (primary_expression
              (identifier))
            operator: (comparison_operator)
            right: (literal
              (number)))
          update: (unary_expression
            argument: (primary_expression
              (identifier)))
          body: (block
            (comment)))))))

==================
Infinite for loop
==================

contract C {
  function f() {
    for (;;) {
      break;
    }
  }
}
---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (for_statement
          body: (block
            (break_statement)))))))

==================
For loop with only a condition (while loop)
==================

contract C {
  function f() {
    uint i;
    for (; i < 10; ) {
      i++;
    }
  }
}
---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (user_defined_type
              name: (symbol
                name: (identifier)))
            name: (identifier)))
        (for_statement
          condition: (comparison_expression
            left: (primary_expression
              (identifier))
            operator: (comparison_operator)
            right: (literal
              (number)))
          body: (block
            (expression_statement
              (unary_expression
                argument: (primary_expression
                  (identifier))))))))))
