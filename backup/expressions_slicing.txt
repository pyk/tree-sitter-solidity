==================
Simple slice with start and end
==================

contract C {
  function f(bytes memory b) {
    bytes memory a = b[1:5];
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (user_defined_type
            name: (symbol
              name: (identifier)))
          location: (data_location)
          name: (identifier)))
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (user_defined_type
              name: (symbol
                name: (identifier)))
            location: (data_location)
            name: (identifier))
          value: (index_range_access_expression
            base: (primary_expression
              (identifier))
            start: (literal
              (number))
            end: (literal
              (number))))))))

==================
Slice with only end
==================

contract C {
  function f(bytes memory b) {
    bytes memory a = b[:5];
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (user_defined_type
            name: (symbol
              name: (identifier)))
          location: (data_location)
          name: (identifier)))
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (user_defined_type
              name: (symbol
                name: (identifier)))
            location: (data_location)
            name: (identifier))
          value: (index_range_access_expression
            base: (primary_expression
              (identifier))
            end: (literal
              (number))))))))

==================
Slice with only start
==================

contract C {
  function f(bytes memory b) {
    bytes memory a = b[1:];
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    function: (function
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (user_defined_type
            name: (symbol
              name: (identifier)))
          location: (data_location)
          name: (identifier)))
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (user_defined_type
              name: (symbol
                name: (identifier)))
            location: (data_location)
            name: (identifier))
          value: (index_range_access_expression
            base: (primary_expression
              (identifier))
            start: (literal
              (number))))))))

==================
Interaction with member access
==================

contract C {
  struct S { bytes data; }
  function f(S memory myStruct) public {
    bytes memory a = myStruct.data[1:5];
  }
}

---

(source_file
  definition: (contract
    name: (identifier)
    struct: (struct
      name: (identifier)
      (struct_member
        type: (user_defined_type
          name: (symbol
            name: (identifier)))
        name: (identifier)))
    function: (function
      name: (identifier)
      parameters: (parameter_list
        parameter: (parameter
          type: (user_defined_type
            name: (symbol
              name: (identifier)))
          location: (data_location)
          name: (identifier)))
      visibility: (visibility)
      body: (block
        (variable_declaration_statement
          declaration: (variable_declaration
            type: (user_defined_type
              name: (symbol
                name: (identifier)))
            location: (data_location)
            name: (identifier))
          value: (index_range_access_expression
            base: (member_access_expression
              object: (primary_expression
                (identifier))
              member: (identifier))
            start: (literal
              (number))
            end: (literal
              (number))))))))
